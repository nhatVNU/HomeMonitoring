
BTL_LTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e44  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004014  08004014  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004014  08004014  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004014  08004014  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004014  08004014  00014014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800401c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010f0  20000074  08004090  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001164  08004090  00021164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137b5  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c39  00000000  00000000  00033852  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001160  00000000  00000000  00036490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001048  00000000  00000000  000375f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019f49  00000000  00000000  00038638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e308  00000000  00000000  00052581  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000977a7  00000000  00000000  00060889  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f4  00000000  00000000  000f80ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f3c 	.word	0x08003f3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003f3c 	.word	0x08003f3c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fc7b 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f825 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f937 	bl	8000400 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000192:	f000 f87d 	bl	8000290 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000196:	f000 f8b9 	bl	800030c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800019a:	f000 f907 	bl	80003ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800019e:	480b      	ldr	r0, [pc, #44]	; (80001cc <main+0x4c>)
 80001a0:	f001 ffd4 	bl	800214c <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendUARTTask */
  osThreadDef(sendUARTTask, sendUART_task, osPriorityNormal, 0, 128);
 80001a4:	4b0a      	ldr	r3, [pc, #40]	; (80001d0 <main+0x50>)
 80001a6:	1d3c      	adds	r4, r7, #4
 80001a8:	461d      	mov	r5, r3
 80001aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendUARTTaskHandle = osThreadCreate(osThread(sendUARTTask), NULL);
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f002 fbf4 	bl	80029a8 <osThreadCreate>
 80001c0:	4602      	mov	r2, r0
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <main+0x54>)
 80001c4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001c6:	f002 fbe8 	bl	800299a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ca:	e7fe      	b.n	80001ca <main+0x4a>
 80001cc:	20001118 	.word	0x20001118
 80001d0:	08003f64 	.word	0x08003f64
 80001d4:	2000109c 	.word	0x2000109c

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b094      	sub	sp, #80	; 0x50
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f003 fde8 	bl	8003dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000208:	2301      	movs	r3, #1
 800020a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800020c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000210:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021a:	2302      	movs	r3, #2
 800021c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000224:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000228:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fa6a 	bl	8001708 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800023a:	f000 f96f 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	2102      	movs	r1, #2
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fcd4 	bl	8001c08 <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000266:	f000 f959 	bl	800051c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800026a:	2302      	movs	r3, #2
 800026c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800026e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000272:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fe62 	bl	8001f40 <HAL_RCCEx_PeriphCLKConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000282:	f000 f94b 	bl	800051c <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3750      	adds	r7, #80	; 0x50
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <MX_ADC1_Init+0x74>)
 80002a2:	4a19      	ldr	r2, [pc, #100]	; (8000308 <MX_ADC1_Init+0x78>)
 80002a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002a6:	4b17      	ldr	r3, [pc, #92]	; (8000304 <MX_ADC1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_ADC1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <MX_ADC1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_ADC1_Init+0x74>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002cc:	480d      	ldr	r0, [pc, #52]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ce:	f000 fc5b 	bl	8000b88 <HAL_ADC_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002d8:	f000 f920 	bl	800051c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002dc:	2300      	movs	r3, #0
 80002de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4619      	mov	r1, r3
 80002ec:	4805      	ldr	r0, [pc, #20]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ee:	f000 fe09 	bl	8000f04 <HAL_ADC_ConfigChannel>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002f8:	f000 f910 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200010a0 	.word	0x200010a0
 8000308:	40012400 	.word	0x40012400

0800030c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000312:	f107 0308 	add.w	r3, r7, #8
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000320:	463b      	mov	r3, r7
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000328:	4b1e      	ldr	r3, [pc, #120]	; (80003a4 <MX_TIM1_Init+0x98>)
 800032a:	4a1f      	ldr	r2, [pc, #124]	; (80003a8 <MX_TIM1_Init+0x9c>)
 800032c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800032e:	4b1d      	ldr	r3, [pc, #116]	; (80003a4 <MX_TIM1_Init+0x98>)
 8000330:	2247      	movs	r2, #71	; 0x47
 8000332:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_TIM1_Init+0x98>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <MX_TIM1_Init+0x98>)
 800033c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000340:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_TIM1_Init+0x98>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_TIM1_Init+0x98>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_TIM1_Init+0x98>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000354:	4813      	ldr	r0, [pc, #76]	; (80003a4 <MX_TIM1_Init+0x98>)
 8000356:	f001 fea9 	bl	80020ac <HAL_TIM_Base_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000360:	f000 f8dc 	bl	800051c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <MX_TIM1_Init+0x98>)
 8000372:	f001 ff35 	bl	80021e0 <HAL_TIM_ConfigClockSource>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800037c:	f000 f8ce 	bl	800051c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000380:	2300      	movs	r3, #0
 8000382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000384:	2300      	movs	r3, #0
 8000386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000388:	463b      	mov	r3, r7
 800038a:	4619      	mov	r1, r3
 800038c:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_TIM1_Init+0x98>)
 800038e:	f002 f8d7 	bl	8002540 <HAL_TIMEx_MasterConfigSynchronization>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000398:	f000 f8c0 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20001118 	.word	0x20001118
 80003a8:	40012c00 	.word	0x40012c00

080003ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003b2:	4a12      	ldr	r2, [pc, #72]	; (80003fc <MX_USART1_UART_Init+0x50>)
 80003b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003d2:	220c      	movs	r2, #12
 80003d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003e4:	f002 f90a 	bl	80025fc <HAL_UART_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ee:	f000 f895 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	200010d4 	.word	0x200010d4
 80003fc:	40013800 	.word	0x40013800

08000400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_GPIO_Init+0x40>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <MX_GPIO_Init+0x40>)
 800040c:	f043 0320 	orr.w	r3, r3, #32
 8000410:	6193      	str	r3, [r2, #24]
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_GPIO_Init+0x40>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f003 0320 	and.w	r3, r3, #32
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_GPIO_Init+0x40>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a07      	ldr	r2, [pc, #28]	; (8000440 <MX_GPIO_Init+0x40>)
 8000424:	f043 0304 	orr.w	r3, r3, #4
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b05      	ldr	r3, [pc, #20]	; (8000440 <MX_GPIO_Init+0x40>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0304 	and.w	r3, r3, #4
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]

}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	40021000 	.word	0x40021000

08000444 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t us)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <delay_us+0x28>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2200      	movs	r2, #0
 8000452:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim1)<us);
 8000454:	bf00      	nop
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <delay_us+0x28>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	429a      	cmp	r2, r3
 8000460:	d8f9      	bhi.n	8000456 <delay_us+0x12>
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	20001118 	.word	0x20001118

08000470 <sendUART_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sendUART_task */
void sendUART_task(void const * argument)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//Read temperature and humidity
	DHT11_GetData(&DHT11_data);
 8000478:	4822      	ldr	r0, [pc, #136]	; (8000504 <sendUART_task+0x94>)
 800047a:	f000 facd 	bl	8000a18 <DHT11_GetData>
	temp = DHT11_data.temperature;
 800047e:	4b21      	ldr	r3, [pc, #132]	; (8000504 <sendUART_task+0x94>)
 8000480:	781a      	ldrb	r2, [r3, #0]
 8000482:	4b21      	ldr	r3, [pc, #132]	; (8000508 <sendUART_task+0x98>)
 8000484:	701a      	strb	r2, [r3, #0]
	hum = DHT11_data.humidity;
 8000486:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <sendUART_task+0x94>)
 8000488:	785a      	ldrb	r2, [r3, #1]
 800048a:	4b20      	ldr	r3, [pc, #128]	; (800050c <sendUART_task+0x9c>)
 800048c:	701a      	strb	r2, [r3, #0]

	//Read MQ4: Use threshold = 900
	HAL_ADC_Start(&hadc1);
 800048e:	4820      	ldr	r0, [pc, #128]	; (8000510 <sendUART_task+0xa0>)
 8000490:	f000 fc52 	bl	8000d38 <HAL_ADC_Start>
	HAL_Delay(20);
 8000494:	2014      	movs	r0, #20
 8000496:	f000 fb55 	bl	8000b44 <HAL_Delay>
	MQ4 = HAL_ADC_GetValue(&hadc1);
 800049a:	481d      	ldr	r0, [pc, #116]	; (8000510 <sendUART_task+0xa0>)
 800049c:	f000 fd26 	bl	8000eec <HAL_ADC_GetValue>
 80004a0:	4602      	mov	r2, r0
 80004a2:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <sendUART_task+0xa4>)
 80004a4:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80004a6:	481a      	ldr	r0, [pc, #104]	; (8000510 <sendUART_task+0xa0>)
 80004a8:	f000 fcf4 	bl	8000e94 <HAL_ADC_Stop>

	//Send value to UART1
	HAL_UART_Transmit(&huart1, &temp, sizeof(temp), 100);
 80004ac:	2364      	movs	r3, #100	; 0x64
 80004ae:	2201      	movs	r2, #1
 80004b0:	4915      	ldr	r1, [pc, #84]	; (8000508 <sendUART_task+0x98>)
 80004b2:	4819      	ldr	r0, [pc, #100]	; (8000518 <sendUART_task+0xa8>)
 80004b4:	f002 f8ef 	bl	8002696 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &hum, sizeof(hum), 100);
 80004b8:	2364      	movs	r3, #100	; 0x64
 80004ba:	2201      	movs	r2, #1
 80004bc:	4913      	ldr	r1, [pc, #76]	; (800050c <sendUART_task+0x9c>)
 80004be:	4816      	ldr	r0, [pc, #88]	; (8000518 <sendUART_task+0xa8>)
 80004c0:	f002 f8e9 	bl	8002696 <HAL_UART_Transmit>
	uint8_t MQ4_buf[4];
	MQ4_buf[0] = (MQ4 >> (uint8_t)24) & 0xff;
 80004c4:	4b13      	ldr	r3, [pc, #76]	; (8000514 <sendUART_task+0xa4>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	0e1b      	lsrs	r3, r3, #24
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	733b      	strb	r3, [r7, #12]
	MQ4_buf[1] = (MQ4 >> (uint8_t)16) & 0xff;
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <sendUART_task+0xa4>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	0c1b      	lsrs	r3, r3, #16
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	737b      	strb	r3, [r7, #13]
	MQ4_buf[2] = (MQ4 >> (uint8_t)8 ) & 0xff;
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <sendUART_task+0xa4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	0a1b      	lsrs	r3, r3, #8
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	73bb      	strb	r3, [r7, #14]
	MQ4_buf[3] = (MQ4 >> (uint8_t)0 ) & 0xff;
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <sendUART_task+0xa4>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &MQ4_buf, sizeof(MQ4_buf), 100);
 80004ea:	f107 010c 	add.w	r1, r7, #12
 80004ee:	2364      	movs	r3, #100	; 0x64
 80004f0:	2204      	movs	r2, #4
 80004f2:	4809      	ldr	r0, [pc, #36]	; (8000518 <sendUART_task+0xa8>)
 80004f4:	f002 f8cf 	bl	8002696 <HAL_UART_Transmit>
    osDelay(2000); //Read and send value every 2 seconds
 80004f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004fc:	f002 faa0 	bl	8002a40 <osDelay>
  {
 8000500:	e7ba      	b.n	8000478 <sendUART_task+0x8>
 8000502:	bf00      	nop
 8000504:	200010d0 	.word	0x200010d0
 8000508:	20000344 	.word	0x20000344
 800050c:	20000345 	.word	0x20000345
 8000510:	200010a0 	.word	0x200010a0
 8000514:	20000348 	.word	0x20000348
 8000518:	200010d4 	.word	0x200010d4

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000522:	e7fe      	b.n	8000522 <Error_Handler+0x6>

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <HAL_MspInit+0x68>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a17      	ldr	r2, [pc, #92]	; (800058c <HAL_MspInit+0x68>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <HAL_MspInit+0x68>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_MspInit+0x68>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a11      	ldr	r2, [pc, #68]	; (800058c <HAL_MspInit+0x68>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <HAL_MspInit+0x68>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	210f      	movs	r1, #15
 800055e:	f06f 0001 	mvn.w	r0, #1
 8000562:	f000 ff1e 	bl	80013a2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <HAL_MspInit+0x6c>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_MspInit+0x6c>)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	40010000 	.word	0x40010000

08000594 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <HAL_ADC_MspInit+0x6c>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d121      	bne.n	80005f8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <HAL_ADC_MspInit+0x70>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a12      	ldr	r2, [pc, #72]	; (8000604 <HAL_ADC_MspInit+0x70>)
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <HAL_ADC_MspInit+0x70>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <HAL_ADC_MspInit+0x70>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <HAL_ADC_MspInit+0x70>)
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_ADC_MspInit+0x70>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005e4:	2301      	movs	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e8:	2303      	movs	r3, #3
 80005ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	4619      	mov	r1, r3
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <HAL_ADC_MspInit+0x74>)
 80005f4:	f000 fefe 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40012400 	.word	0x40012400
 8000604:	40021000 	.word	0x40021000
 8000608:	40010800 	.word	0x40010800

0800060c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a09      	ldr	r2, [pc, #36]	; (8000640 <HAL_TIM_Base_MspInit+0x34>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d10b      	bne.n	8000636 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_TIM_Base_MspInit+0x38>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <HAL_TIM_Base_MspInit+0x38>)
 8000624:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_TIM_Base_MspInit+0x38>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	40012c00 	.word	0x40012c00
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <HAL_UART_MspInit+0x8c>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d131      	bne.n	80006cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <HAL_UART_MspInit+0x90>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <HAL_UART_MspInit+0x90>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <HAL_UART_MspInit+0x90>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <HAL_UART_MspInit+0x90>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <HAL_UART_MspInit+0x90>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_UART_MspInit+0x90>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800069c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	4619      	mov	r1, r3
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <HAL_UART_MspInit+0x94>)
 80006ae:	f000 fea1 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4619      	mov	r1, r3
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_UART_MspInit+0x94>)
 80006c8:	f000 fe94 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40013800 	.word	0x40013800
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010800 	.word	0x40010800

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr

0800070a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070e:	f000 f9fd 	bl	8000b0c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000712:	f002 ff35 	bl	8003580 <xTaskGetSchedulerState>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d001      	beq.n	8000720 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800071c:	f003 f914 	bl	8003948 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000732:	490d      	ldr	r1, [pc, #52]	; (8000768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000738:	e002      	b.n	8000740 <LoopCopyDataInit>

0800073a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800073c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073e:	3304      	adds	r3, #4

08000740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000744:	d3f9      	bcc.n	800073a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000748:	4c0a      	ldr	r4, [pc, #40]	; (8000774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800074c:	e001      	b.n	8000752 <LoopFillZerobss>

0800074e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000750:	3204      	adds	r2, #4

08000752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000754:	d3fb      	bcc.n	800074e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000756:	f7ff ffe5 	bl	8000724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075a:	f003 fb0b 	bl	8003d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075e:	f7ff fd0f 	bl	8000180 <main>
  bx lr
 8000762:	4770      	bx	lr
  ldr r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000768:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800076c:	0800401c 	.word	0x0800401c
  ldr r2, =_sbss
 8000770:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000774:	20001164 	.word	0x20001164

08000778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000778:	e7fe      	b.n	8000778 <ADC1_2_IRQHandler>
	...

0800077c <set_pin_output>:

#include "DHT11.h"
#include "main.h"
#include "stdio.h"
void set_pin_output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	807b      	strh	r3, [r7, #2]
	if(GPIOx == GPIOA){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a25      	ldr	r2, [pc, #148]	; (8000820 <set_pin_output+0xa4>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d10c      	bne.n	80007aa <set_pin_output+0x2e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <set_pin_output+0xa8>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a23      	ldr	r2, [pc, #140]	; (8000824 <set_pin_output+0xa8>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <set_pin_output+0xa8>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	e020      	b.n	80007ec <set_pin_output+0x70>
	}else if(GPIOx == GPIOB){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a1e      	ldr	r2, [pc, #120]	; (8000828 <set_pin_output+0xac>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d10c      	bne.n	80007cc <set_pin_output+0x50>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <set_pin_output+0xa8>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <set_pin_output+0xa8>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6193      	str	r3, [r2, #24]
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <set_pin_output+0xa8>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	e00f      	b.n	80007ec <set_pin_output+0x70>
	}else if(GPIOx == GPIOC){
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <set_pin_output+0xb0>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d10b      	bne.n	80007ec <set_pin_output+0x70>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <set_pin_output+0xa8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <set_pin_output+0xa8>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <set_pin_output+0xa8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0310 	and.w	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
	}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0318 	add.w	r3, r7, #24
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80007fa:	887b      	ldrh	r3, [r7, #2]
 80007fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2302      	movs	r3, #2
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f000 fdef 	bl	80013f4 <HAL_GPIO_Init>

}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40010800 	.word	0x40010800
 8000824:	40021000 	.word	0x40021000
 8000828:	40010c00 	.word	0x40010c00
 800082c:	40011000 	.word	0x40011000

08000830 <set_pin_input>:

void set_pin_input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
	if(GPIOx == GPIOA){
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a24      	ldr	r2, [pc, #144]	; (80008d0 <set_pin_input+0xa0>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d10c      	bne.n	800085e <set_pin_input+0x2e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <set_pin_input+0xa4>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a22      	ldr	r2, [pc, #136]	; (80008d4 <set_pin_input+0xa4>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <set_pin_input+0xa4>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	e020      	b.n	80008a0 <set_pin_input+0x70>
	}else if(GPIOx == GPIOB){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <set_pin_input+0xa8>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d10c      	bne.n	8000880 <set_pin_input+0x50>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <set_pin_input+0xa4>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a1a      	ldr	r2, [pc, #104]	; (80008d4 <set_pin_input+0xa4>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6193      	str	r3, [r2, #24]
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <set_pin_input+0xa4>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	e00f      	b.n	80008a0 <set_pin_input+0x70>
	}else if(GPIOx == GPIOC){
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a16      	ldr	r2, [pc, #88]	; (80008dc <set_pin_input+0xac>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d10b      	bne.n	80008a0 <set_pin_input+0x70>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <set_pin_input+0xa4>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <set_pin_input+0xa4>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <set_pin_input+0xa4>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
	}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0318 	add.w	r3, r7, #24
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80008ae:	887b      	ldrh	r3, [r7, #2]
 80008b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80008ba:	f107 0318 	add.w	r3, r7, #24
 80008be:	4619      	mov	r1, r3
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 fd97 	bl	80013f4 <HAL_GPIO_Init>
}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010800 	.word	0x40010800
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010c00 	.word	0x40010c00
 80008dc:	40011000 	.word	0x40011000

080008e0 <DHT11_Start>:
void DHT11_Start(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	set_pin_output(DHT11_PORT, DHT11_PIN);
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <DHT11_Start+0x40>)
 80008ea:	f7ff ff47 	bl	800077c <set_pin_output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f4:	480a      	ldr	r0, [pc, #40]	; (8000920 <DHT11_Start+0x40>)
 80008f6:	f000 feee 	bl	80016d6 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80008fa:	2014      	movs	r0, #20
 80008fc:	f000 f922 	bl	8000b44 <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <DHT11_Start+0x40>)
 8000908:	f000 fee5 	bl	80016d6 <HAL_GPIO_WritePin>
	delay_us(30); //wait for 30us
 800090c:	201e      	movs	r0, #30
 800090e:	f7ff fd99 	bl	8000444 <delay_us>
	set_pin_input(DHT11_PORT, DHT11_PIN);
 8000912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000916:	4802      	ldr	r0, [pc, #8]	; (8000920 <DHT11_Start+0x40>)
 8000918:	f7ff ff8a 	bl	8000830 <set_pin_input>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40010c00 	.word	0x40010c00

08000924 <DHT11_Check_Response>:
uint8_t DHT11_Check_Response(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	uint8_t response = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	71fb      	strb	r3, [r7, #7]
	delay_us(40);
 800092e:	2028      	movs	r0, #40	; 0x28
 8000930:	f7ff fd88 	bl	8000444 <delay_us>
	if(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)){
 8000934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000938:	4810      	ldr	r0, [pc, #64]	; (800097c <DHT11_Check_Response+0x58>)
 800093a:	f000 feb5 	bl	80016a8 <HAL_GPIO_ReadPin>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10c      	bne.n	800095e <DHT11_Check_Response+0x3a>
		delay_us(80);
 8000944:	2050      	movs	r0, #80	; 0x50
 8000946:	f7ff fd7d 	bl	8000444 <delay_us>
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)){
 800094a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094e:	480b      	ldr	r0, [pc, #44]	; (800097c <DHT11_Check_Response+0x58>)
 8000950:	f000 feaa 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <DHT11_Check_Response+0x3a>
			response = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	71fb      	strb	r3, [r7, #7]
		}
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 800095e:	bf00      	nop
 8000960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <DHT11_Check_Response+0x58>)
 8000966:	f000 fe9f 	bl	80016a8 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1f7      	bne.n	8000960 <DHT11_Check_Response+0x3c>
	return response;
 8000970:	79fb      	ldrb	r3, [r7, #7]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40010c00 	.word	0x40010c00

08000980 <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for(j=0;j<8;j++){
 8000986:	2300      	movs	r3, #0
 8000988:	71bb      	strb	r3, [r7, #6]
 800098a:	e03a      	b.n	8000a02 <DHT11_Read+0x82>
		while(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 800098c:	bf00      	nop
 800098e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000992:	4820      	ldr	r0, [pc, #128]	; (8000a14 <DHT11_Read+0x94>)
 8000994:	f000 fe88 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0f7      	beq.n	800098e <DHT11_Read+0xe>
		delay_us(40);
 800099e:	2028      	movs	r0, #40	; 0x28
 80009a0:	f7ff fd50 	bl	8000444 <delay_us>
		if(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)){
 80009a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a8:	481a      	ldr	r0, [pc, #104]	; (8000a14 <DHT11_Read+0x94>)
 80009aa:	f000 fe7d 	bl	80016a8 <HAL_GPIO_ReadPin>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10e      	bne.n	80009d2 <DHT11_Read+0x52>
			i &= ~(1 << (7 - j));
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	f1c3 0307 	rsb	r3, r3, #7
 80009ba:	2201      	movs	r2, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	b25a      	sxtb	r2, r3
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	4013      	ands	r3, r2
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	e00b      	b.n	80009ea <DHT11_Read+0x6a>
		}else{
			i |=  (1 << (7 - j));
 80009d2:	79bb      	ldrb	r3, [r7, #6]
 80009d4:	f1c3 0307 	rsb	r3, r3, #7
 80009d8:	2201      	movs	r2, #1
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	b25a      	sxtb	r2, r3
 80009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b25b      	sxtb	r3, r3
 80009e8:	71fb      	strb	r3, [r7, #7]
		}
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 80009ea:	bf00      	nop
 80009ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <DHT11_Read+0x94>)
 80009f2:	f000 fe59 	bl	80016a8 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1f7      	bne.n	80009ec <DHT11_Read+0x6c>
	for(j=0;j<8;j++){
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	3301      	adds	r3, #1
 8000a00:	71bb      	strb	r3, [r7, #6]
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	2b07      	cmp	r3, #7
 8000a06:	d9c1      	bls.n	800098c <DHT11_Read+0xc>
	}
	return i;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <DHT11_GetData>:

void DHT11_GetData(DHT11_Type_t *DHT11_data)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
	uint16_t SUM;
	DHT11_Start();
 8000a20:	f7ff ff5e 	bl	80008e0 <DHT11_Start>
	if(DHT11_Check_Response()){
 8000a24:	f7ff ff7e 	bl	8000924 <DHT11_Check_Response>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d023      	beq.n	8000a76 <DHT11_GetData+0x5e>
		Rh_byte1 = DHT11_Read();
 8000a2e:	f7ff ffa7 	bl	8000980 <DHT11_Read>
 8000a32:	4603      	mov	r3, r0
 8000a34:	73fb      	strb	r3, [r7, #15]
		Rh_byte2 = DHT11_Read();
 8000a36:	f7ff ffa3 	bl	8000980 <DHT11_Read>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	73bb      	strb	r3, [r7, #14]
		Temp_byte1 = DHT11_Read();
 8000a3e:	f7ff ff9f 	bl	8000980 <DHT11_Read>
 8000a42:	4603      	mov	r3, r0
 8000a44:	737b      	strb	r3, [r7, #13]
		Temp_byte2 = DHT11_Read();
 8000a46:	f7ff ff9b 	bl	8000980 <DHT11_Read>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	733b      	strb	r3, [r7, #12]
		SUM = DHT11_Read();
 8000a4e:	f7ff ff97 	bl	8000980 <DHT11_Read>
 8000a52:	4603      	mov	r3, r0
 8000a54:	817b      	strh	r3, [r7, #10]
		if(Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2 == SUM){
 8000a56:	7bfa      	ldrb	r2, [r7, #15]
 8000a58:	7bbb      	ldrb	r3, [r7, #14]
 8000a5a:	441a      	add	r2, r3
 8000a5c:	7b7b      	ldrb	r3, [r7, #13]
 8000a5e:	441a      	add	r2, r3
 8000a60:	7b3b      	ldrb	r3, [r7, #12]
 8000a62:	441a      	add	r2, r3
 8000a64:	897b      	ldrh	r3, [r7, #10]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d105      	bne.n	8000a76 <DHT11_GetData+0x5e>
			DHT11_data->temperature = (uint8_t)Temp_byte1; //(float)Temp_byte1 + (float)(Temp_byte2/10.0)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7b7a      	ldrb	r2, [r7, #13]
 8000a6e:	701a      	strb	r2, [r3, #0]
			DHT11_data->humidity = (uint8_t)Rh_byte1;      //(float)Rh_byte1 + (float)(Rh_byte2/10.0)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	705a      	strb	r2, [r3, #1]
		}
	}
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_Init+0x28>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_Init+0x28>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 fc7b 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	200f      	movs	r0, #15
 8000a98:	f000 f808 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff fd42 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40022000 	.word	0x40022000

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x54>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x58>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fc85 	bl	80013da <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00e      	b.n	8000af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d80a      	bhi.n	8000af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f000 fc5b 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <HAL_InitTick+0x5c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_IncTick+0x1c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_IncTick+0x20>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a03      	ldr	r2, [pc, #12]	; (8000b2c <HAL_IncTick+0x20>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20001160 	.word	0x20001160

08000b30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b02      	ldr	r3, [pc, #8]	; (8000b40 <HAL_GetTick+0x10>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	20001160 	.word	0x20001160

08000b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b4c:	f7ff fff0 	bl	8000b30 <HAL_GetTick>
 8000b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	d005      	beq.n	8000b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_Delay+0x40>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6a:	bf00      	nop
 8000b6c:	f7ff ffe0 	bl	8000b30 <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f7      	bhi.n	8000b6c <HAL_Delay+0x28>
  {
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000008 	.word	0x20000008

08000b88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e0be      	b.n	8000d28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d109      	bne.n	8000bcc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fce4 	bl	8000594 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f000 faeb 	bl	80011a8 <ADC_ConversionStop_Disable>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f040 8099 	bne.w	8000d16 <HAL_ADC_Init+0x18e>
 8000be4:	7dfb      	ldrb	r3, [r7, #23]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8095 	bne.w	8000d16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bf4:	f023 0302 	bic.w	r3, r3, #2
 8000bf8:	f043 0202 	orr.w	r2, r3, #2
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7b1b      	ldrb	r3, [r3, #12]
 8000c0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c20:	d003      	beq.n	8000c2a <HAL_ADC_Init+0xa2>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <HAL_ADC_Init+0xa8>
 8000c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2e:	e000      	b.n	8000c32 <HAL_ADC_Init+0xaa>
 8000c30:	2300      	movs	r3, #0
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7d1b      	ldrb	r3, [r3, #20]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d119      	bne.n	8000c74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7b1b      	ldrb	r3, [r3, #12]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d109      	bne.n	8000c5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	035a      	lsls	r2, r3, #13
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	e00b      	b.n	8000c74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c60:	f043 0220 	orr.w	r2, r3, #32
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	f043 0201 	orr.w	r2, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <HAL_ADC_Init+0x1a8>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	6812      	ldr	r2, [r2, #0]
 8000c96:	68b9      	ldr	r1, [r7, #8]
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ca4:	d003      	beq.n	8000cae <HAL_ADC_Init+0x126>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d104      	bne.n	8000cb8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	051b      	lsls	r3, r3, #20
 8000cb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_ADC_Init+0x1ac>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d10b      	bne.n	8000cf4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce6:	f023 0303 	bic.w	r3, r3, #3
 8000cea:	f043 0201 	orr.w	r2, r3, #1
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cf2:	e018      	b.n	8000d26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	f023 0312 	bic.w	r3, r3, #18
 8000cfc:	f043 0210 	orr.w	r2, r3, #16
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	f043 0201 	orr.w	r2, r3, #1
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d14:	e007      	b.n	8000d26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1a:	f043 0210 	orr.w	r2, r3, #16
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	ffe1f7fd 	.word	0xffe1f7fd
 8000d34:	ff1f0efe 	.word	0xff1f0efe

08000d38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d101      	bne.n	8000d52 <HAL_ADC_Start+0x1a>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e098      	b.n	8000e84 <HAL_ADC_Start+0x14c>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f9ca 	bl	80010f4 <ADC_Enable>
 8000d60:	4603      	mov	r3, r0
 8000d62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 8087 	bne.w	8000e7a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d74:	f023 0301 	bic.w	r3, r3, #1
 8000d78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a41      	ldr	r2, [pc, #260]	; (8000e8c <HAL_ADC_Start+0x154>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d105      	bne.n	8000d96 <HAL_ADC_Start+0x5e>
 8000d8a:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <HAL_ADC_Start+0x158>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d115      	bne.n	8000dc2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d026      	beq.n	8000dfe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dc0:	e01d      	b.n	8000dfe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a2f      	ldr	r2, [pc, #188]	; (8000e90 <HAL_ADC_Start+0x158>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d004      	beq.n	8000de2 <HAL_ADC_Start+0xaa>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a2b      	ldr	r2, [pc, #172]	; (8000e8c <HAL_ADC_Start+0x154>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10d      	bne.n	8000dfe <HAL_ADC_Start+0xc6>
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <HAL_ADC_Start+0x158>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d007      	beq.n	8000dfe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000df6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d006      	beq.n	8000e18 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0e:	f023 0206 	bic.w	r2, r3, #6
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e16:	e002      	b.n	8000e1e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f06f 0202 	mvn.w	r2, #2
 8000e2e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e3a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e3e:	d113      	bne.n	8000e68 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e44:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <HAL_ADC_Start+0x154>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d105      	bne.n	8000e56 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_ADC_Start+0x158>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d108      	bne.n	8000e68 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	e00c      	b.n	8000e82 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	e003      	b.n	8000e82 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40012800 	.word	0x40012800
 8000e90:	40012400 	.word	0x40012400

08000e94 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d101      	bne.n	8000eae <HAL_ADC_Stop+0x1a>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e01a      	b.n	8000ee4 <HAL_ADC_Stop+0x50>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f976 	bl	80011a8 <ADC_ConversionStop_Disable>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d109      	bne.n	8000eda <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ece:	f023 0301 	bic.w	r3, r3, #1
 8000ed2:	f043 0201 	orr.w	r2, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d101      	bne.n	8000f24 <HAL_ADC_ConfigChannel+0x20>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e0dc      	b.n	80010de <HAL_ADC_ConfigChannel+0x1da>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b06      	cmp	r3, #6
 8000f32:	d81c      	bhi.n	8000f6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	3b05      	subs	r3, #5
 8000f46:	221f      	movs	r2, #31
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	4019      	ands	r1, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3b05      	subs	r3, #5
 8000f60:	fa00 f203 	lsl.w	r2, r0, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f6c:	e03c      	b.n	8000fe8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b0c      	cmp	r3, #12
 8000f74:	d81c      	bhi.n	8000fb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	3b23      	subs	r3, #35	; 0x23
 8000f88:	221f      	movs	r2, #31
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	4019      	ands	r1, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3b23      	subs	r3, #35	; 0x23
 8000fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	631a      	str	r2, [r3, #48]	; 0x30
 8000fae:	e01b      	b.n	8000fe8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3b41      	subs	r3, #65	; 0x41
 8000fc2:	221f      	movs	r2, #31
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	4019      	ands	r1, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	3b41      	subs	r3, #65	; 0x41
 8000fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b09      	cmp	r3, #9
 8000fee:	d91c      	bls.n	800102a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68d9      	ldr	r1, [r3, #12]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	3b1e      	subs	r3, #30
 8001002:	2207      	movs	r2, #7
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	4019      	ands	r1, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	6898      	ldr	r0, [r3, #8]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	3b1e      	subs	r3, #30
 800101c:	fa00 f203 	lsl.w	r2, r0, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	e019      	b.n	800105e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6919      	ldr	r1, [r3, #16]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	2207      	movs	r2, #7
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	4019      	ands	r1, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	6898      	ldr	r0, [r3, #8]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	fa00 f203 	lsl.w	r2, r0, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b10      	cmp	r3, #16
 8001064:	d003      	beq.n	800106e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800106a:	2b11      	cmp	r3, #17
 800106c:	d132      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a1d      	ldr	r2, [pc, #116]	; (80010e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d125      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d126      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001094:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b10      	cmp	r3, #16
 800109c:	d11a      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <HAL_ADC_ConfigChannel+0x1e8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80010a4:	fba2 2303 	umull	r2, r3, r2, r3
 80010a8:	0c9a      	lsrs	r2, r3, #18
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010b4:	e002      	b.n	80010bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f9      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x1b2>
 80010c2:	e007      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	f043 0220 	orr.w	r2, r3, #32
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40012400 	.word	0x40012400
 80010ec:	20000000 	.word	0x20000000
 80010f0:	431bde83 	.word	0x431bde83

080010f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b01      	cmp	r3, #1
 8001110:	d040      	beq.n	8001194 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 0201 	orr.w	r2, r2, #1
 8001120:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <ADC_Enable+0xac>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <ADC_Enable+0xb0>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	0c9b      	lsrs	r3, r3, #18
 800112e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001130:	e002      	b.n	8001138 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3b01      	subs	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800113e:	f7ff fcf7 	bl	8000b30 <HAL_GetTick>
 8001142:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001144:	e01f      	b.n	8001186 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001146:	f7ff fcf3 	bl	8000b30 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d918      	bls.n	8001186 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b01      	cmp	r3, #1
 8001160:	d011      	beq.n	8001186 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	f043 0210 	orr.w	r2, r3, #16
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	f043 0201 	orr.w	r2, r3, #1
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e007      	b.n	8001196 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b01      	cmp	r3, #1
 8001192:	d1d8      	bne.n	8001146 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000000 	.word	0x20000000
 80011a4:	431bde83 	.word	0x431bde83

080011a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d12e      	bne.n	8001220 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0201 	bic.w	r2, r2, #1
 80011d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011d2:	f7ff fcad 	bl	8000b30 <HAL_GetTick>
 80011d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011d8:	e01b      	b.n	8001212 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011da:	f7ff fca9 	bl	8000b30 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d914      	bls.n	8001212 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10d      	bne.n	8001212 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fa:	f043 0210 	orr.w	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e007      	b.n	8001222 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b01      	cmp	r3, #1
 800121e:	d0dc      	beq.n	80011da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f7ff ff90 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff49 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff5e 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff90 	bl	80012e4 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5f 	bl	8001290 <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffb0 	bl	8001348 <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	e127      	b.n	8001658 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001408:	2201      	movs	r2, #1
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	429a      	cmp	r2, r3
 8001422:	f040 8116 	bne.w	8001652 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b12      	cmp	r3, #18
 800142c:	d034      	beq.n	8001498 <HAL_GPIO_Init+0xa4>
 800142e:	2b12      	cmp	r3, #18
 8001430:	d80d      	bhi.n	800144e <HAL_GPIO_Init+0x5a>
 8001432:	2b02      	cmp	r3, #2
 8001434:	d02b      	beq.n	800148e <HAL_GPIO_Init+0x9a>
 8001436:	2b02      	cmp	r3, #2
 8001438:	d804      	bhi.n	8001444 <HAL_GPIO_Init+0x50>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d031      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d01c      	beq.n	800147c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001442:	e048      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001444:	2b03      	cmp	r3, #3
 8001446:	d043      	beq.n	80014d0 <HAL_GPIO_Init+0xdc>
 8001448:	2b11      	cmp	r3, #17
 800144a:	d01b      	beq.n	8001484 <HAL_GPIO_Init+0x90>
          break;
 800144c:	e043      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800144e:	4a89      	ldr	r2, [pc, #548]	; (8001674 <HAL_GPIO_Init+0x280>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d026      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
 8001454:	4a87      	ldr	r2, [pc, #540]	; (8001674 <HAL_GPIO_Init+0x280>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d806      	bhi.n	8001468 <HAL_GPIO_Init+0x74>
 800145a:	4a87      	ldr	r2, [pc, #540]	; (8001678 <HAL_GPIO_Init+0x284>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d020      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
 8001460:	4a86      	ldr	r2, [pc, #536]	; (800167c <HAL_GPIO_Init+0x288>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d01d      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
          break;
 8001466:	e036      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001468:	4a85      	ldr	r2, [pc, #532]	; (8001680 <HAL_GPIO_Init+0x28c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d019      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
 800146e:	4a85      	ldr	r2, [pc, #532]	; (8001684 <HAL_GPIO_Init+0x290>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d016      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
 8001474:	4a84      	ldr	r2, [pc, #528]	; (8001688 <HAL_GPIO_Init+0x294>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
          break;
 800147a:	e02c      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	623b      	str	r3, [r7, #32]
          break;
 8001482:	e028      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	3304      	adds	r3, #4
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e023      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	3308      	adds	r3, #8
 8001494:	623b      	str	r3, [r7, #32]
          break;
 8001496:	e01e      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	330c      	adds	r3, #12
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	e019      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014aa:	2304      	movs	r3, #4
 80014ac:	623b      	str	r3, [r7, #32]
          break;
 80014ae:	e012      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b8:	2308      	movs	r3, #8
 80014ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	611a      	str	r2, [r3, #16]
          break;
 80014c2:	e008      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	615a      	str	r2, [r3, #20]
          break;
 80014ce:	e002      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2bff      	cmp	r3, #255	; 0xff
 80014da:	d801      	bhi.n	80014e0 <HAL_GPIO_Init+0xec>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	e001      	b.n	80014e4 <HAL_GPIO_Init+0xf0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3304      	adds	r3, #4
 80014e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2bff      	cmp	r3, #255	; 0xff
 80014ea:	d802      	bhi.n	80014f2 <HAL_GPIO_Init+0xfe>
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	e002      	b.n	80014f8 <HAL_GPIO_Init+0x104>
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	3b08      	subs	r3, #8
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	210f      	movs	r1, #15
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	401a      	ands	r2, r3
 800150a:	6a39      	ldr	r1, [r7, #32]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	431a      	orrs	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8096 	beq.w	8001652 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001526:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_GPIO_Init+0x298>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_GPIO_Init+0x298>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6193      	str	r3, [r2, #24]
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_GPIO_Init+0x298>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800153e:	4a54      	ldr	r2, [pc, #336]	; (8001690 <HAL_GPIO_Init+0x29c>)
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4013      	ands	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4b      	ldr	r2, [pc, #300]	; (8001694 <HAL_GPIO_Init+0x2a0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x19e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4a      	ldr	r2, [pc, #296]	; (8001698 <HAL_GPIO_Init+0x2a4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x19a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a49      	ldr	r2, [pc, #292]	; (800169c <HAL_GPIO_Init+0x2a8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x196>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a48      	ldr	r2, [pc, #288]	; (80016a0 <HAL_GPIO_Init+0x2ac>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x192>
 8001582:	2303      	movs	r3, #3
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x1a0>
 8001586:	2304      	movs	r3, #4
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x1a0>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x1a0>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x1a0>
 8001592:	2300      	movs	r3, #0
 8001594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001596:	f002 0203 	and.w	r2, r2, #3
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015a4:	493a      	ldr	r1, [pc, #232]	; (8001690 <HAL_GPIO_Init+0x29c>)
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4938      	ldr	r1, [pc, #224]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
 80015ca:	e006      	b.n	80015da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	4933      	ldr	r1, [pc, #204]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	492e      	ldr	r1, [pc, #184]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
 80015f2:	e006      	b.n	8001602 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f4:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	4929      	ldr	r1, [pc, #164]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015fe:	4013      	ands	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d006      	beq.n	800161c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	4924      	ldr	r1, [pc, #144]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
 800161a:	e006      	b.n	800162a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	43db      	mvns	r3, r3
 8001624:	491f      	ldr	r1, [pc, #124]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001626:	4013      	ands	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	491a      	ldr	r1, [pc, #104]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	60cb      	str	r3, [r1, #12]
 8001642:	e006      	b.n	8001652 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	43db      	mvns	r3, r3
 800164c:	4915      	ldr	r1, [pc, #84]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 800164e:	4013      	ands	r3, r2
 8001650:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	3301      	adds	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f aed0 	bne.w	8001408 <HAL_GPIO_Init+0x14>
  }
}
 8001668:	bf00      	nop
 800166a:	372c      	adds	r7, #44	; 0x2c
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	10210000 	.word	0x10210000
 8001678:	10110000 	.word	0x10110000
 800167c:	10120000 	.word	0x10120000
 8001680:	10310000 	.word	0x10310000
 8001684:	10320000 	.word	0x10320000
 8001688:	10220000 	.word	0x10220000
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000
 8001694:	40010800 	.word	0x40010800
 8001698:	40010c00 	.word	0x40010c00
 800169c:	40011000 	.word	0x40011000
 80016a0:	40011400 	.word	0x40011400
 80016a4:	40010400 	.word	0x40010400

080016a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e001      	b.n	80016ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	807b      	strh	r3, [r7, #2]
 80016e2:	4613      	mov	r3, r2
 80016e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e6:	787b      	ldrb	r3, [r7, #1]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ec:	887a      	ldrh	r2, [r7, #2]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016f2:	e003      	b.n	80016fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016f4:	887b      	ldrh	r3, [r7, #2]
 80016f6:	041a      	lsls	r2, r3, #16
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	611a      	str	r2, [r3, #16]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
	...

08001708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e26c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8087 	beq.w	8001836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001728:	4b92      	ldr	r3, [pc, #584]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b04      	cmp	r3, #4
 8001732:	d00c      	beq.n	800174e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001734:	4b8f      	ldr	r3, [pc, #572]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d112      	bne.n	8001766 <HAL_RCC_OscConfig+0x5e>
 8001740:	4b8c      	ldr	r3, [pc, #560]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174c:	d10b      	bne.n	8001766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174e:	4b89      	ldr	r3, [pc, #548]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d06c      	beq.n	8001834 <HAL_RCC_OscConfig+0x12c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d168      	bne.n	8001834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e246      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x76>
 8001770:	4b80      	ldr	r3, [pc, #512]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a7f      	ldr	r2, [pc, #508]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e02e      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x98>
 8001786:	4b7b      	ldr	r3, [pc, #492]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7a      	ldr	r2, [pc, #488]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b78      	ldr	r3, [pc, #480]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a77      	ldr	r2, [pc, #476]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e01d      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0xbc>
 80017aa:	4b72      	ldr	r3, [pc, #456]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a71      	ldr	r2, [pc, #452]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b6f      	ldr	r3, [pc, #444]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a6e      	ldr	r2, [pc, #440]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 80017c4:	4b6b      	ldr	r3, [pc, #428]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a6a      	ldr	r2, [pc, #424]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a67      	ldr	r2, [pc, #412]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff f9a4 	bl	8000b30 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff f9a0 	bl	8000b30 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1fa      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0xe4>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff f990 	bl	8000b30 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff f98c 	bl	8000b30 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	; 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1e6      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x10c>
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d063      	beq.n	800190a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001842:	4b4c      	ldr	r3, [pc, #304]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800184e:	4b49      	ldr	r3, [pc, #292]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	d11c      	bne.n	8001894 <HAL_RCC_OscConfig+0x18c>
 800185a:	4b46      	ldr	r3, [pc, #280]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d116      	bne.n	8001894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	4b43      	ldr	r3, [pc, #268]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x176>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e1ba      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4939      	ldr	r1, [pc, #228]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	e03a      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189c:	4b36      	ldr	r3, [pc, #216]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff f945 	bl	8000b30 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff f941 	bl	8000b30 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e19b      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4927      	ldr	r1, [pc, #156]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff f924 	bl	8000b30 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ec:	f7ff f920 	bl	8000b30 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e17a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d03a      	beq.n	800198c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d019      	beq.n	8001952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_RCC_OscConfig+0x274>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7ff f904 	bl	8000b30 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff f900 	bl	8000b30 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e15a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f000 fada 	bl	8001f04 <RCC_Delay>
 8001950:	e01c      	b.n	800198c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_OscConfig+0x274>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7ff f8ea 	bl	8000b30 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195e:	e00f      	b.n	8001980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff f8e6 	bl	8000b30 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d908      	bls.n	8001980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e140      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	42420000 	.word	0x42420000
 800197c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	4b9e      	ldr	r3, [pc, #632]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e9      	bne.n	8001960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80a6 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199e:	4b97      	ldr	r3, [pc, #604]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10d      	bne.n	80019c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b94      	ldr	r3, [pc, #592]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a93      	ldr	r2, [pc, #588]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b91      	ldr	r3, [pc, #580]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c2:	2301      	movs	r3, #1
 80019c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c6:	4b8e      	ldr	r3, [pc, #568]	; (8001c00 <HAL_RCC_OscConfig+0x4f8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d118      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d2:	4b8b      	ldr	r3, [pc, #556]	; (8001c00 <HAL_RCC_OscConfig+0x4f8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a8a      	ldr	r2, [pc, #552]	; (8001c00 <HAL_RCC_OscConfig+0x4f8>)
 80019d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019de:	f7ff f8a7 	bl	8000b30 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e6:	f7ff f8a3 	bl	8000b30 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b64      	cmp	r3, #100	; 0x64
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e0fd      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	4b81      	ldr	r3, [pc, #516]	; (8001c00 <HAL_RCC_OscConfig+0x4f8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x312>
 8001a0c:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4a7a      	ldr	r2, [pc, #488]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	e02d      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x334>
 8001a22:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a75      	ldr	r2, [pc, #468]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a72      	ldr	r2, [pc, #456]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	e01c      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d10c      	bne.n	8001a5e <HAL_RCC_OscConfig+0x356>
 8001a44:	4b6d      	ldr	r3, [pc, #436]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a6c      	ldr	r2, [pc, #432]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a69      	ldr	r2, [pc, #420]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	e00b      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a5e:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a66      	ldr	r2, [pc, #408]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b64      	ldr	r3, [pc, #400]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a63      	ldr	r2, [pc, #396]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d015      	beq.n	8001aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f857 	bl	8000b30 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff f853 	bl	8000b30 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e0ab      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0ee      	beq.n	8001a86 <HAL_RCC_OscConfig+0x37e>
 8001aa8:	e014      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff f841 	bl	8000b30 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7ff f83d 	bl	8000b30 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e095      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac8:	4b4c      	ldr	r3, [pc, #304]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ee      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d105      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ada:	4b48      	ldr	r3, [pc, #288]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a47      	ldr	r2, [pc, #284]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8081 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af0:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d061      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d146      	bne.n	8001b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b04:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <HAL_RCC_OscConfig+0x4fc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff f811 	bl	8000b30 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff f80d 	bl	8000b30 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e067      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b38:	d108      	bne.n	8001b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b3a:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	492d      	ldr	r1, [pc, #180]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a19      	ldr	r1, [r3, #32]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	4927      	ldr	r1, [pc, #156]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x4fc>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7fe ffe1 	bl	8000b30 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7fe ffdd 	bl	8000b30 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e037      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x46a>
 8001b90:	e02f      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_RCC_OscConfig+0x4fc>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7fe ffca 	bl	8000b30 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7fe ffc6 	bl	8000b30 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e020      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x498>
 8001bbe:	e018      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e013      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40007000 	.word	0x40007000
 8001c04:	42420060 	.word	0x42420060

08001c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0d0      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d910      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	4965      	ldr	r1, [pc, #404]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b63      	ldr	r3, [pc, #396]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0b8      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c64:	4b59      	ldr	r3, [pc, #356]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a58      	ldr	r2, [pc, #352]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c7c:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a52      	ldr	r2, [pc, #328]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c88:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	494d      	ldr	r1, [pc, #308]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d040      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d115      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e07f      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc6:	4b41      	ldr	r3, [pc, #260]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e073      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e06b      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce6:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f023 0203 	bic.w	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4936      	ldr	r1, [pc, #216]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf8:	f7fe ff1a 	bl	8000b30 <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d00:	f7fe ff16 	bl	8000b30 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e053      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 020c 	and.w	r2, r3, #12
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d1eb      	bne.n	8001d00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d210      	bcs.n	8001d58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 0207 	bic.w	r2, r3, #7
 8001d3e:	4922      	ldr	r1, [pc, #136]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e032      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4916      	ldr	r1, [pc, #88]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	490e      	ldr	r1, [pc, #56]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d96:	f000 f821 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	fa21 f303 	lsr.w	r3, r1, r3
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fe78 	bl	8000aac <HAL_InitTick>

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	08003f9c 	.word	0x08003f9c
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b490      	push	{r4, r7}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001de2:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001de4:	1d3c      	adds	r4, r7, #4
 8001de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dec:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0x40>
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d003      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0x46>
 8001e1a:	e02d      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e1e:	623b      	str	r3, [r7, #32]
      break;
 8001e20:	e02d      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	0c9b      	lsrs	r3, r3, #18
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e2e:	4413      	add	r3, r2
 8001e30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d013      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	0c5b      	lsrs	r3, r3, #17
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e4e:	4413      	add	r3, r2
 8001e50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e5a:	fb02 f203 	mul.w	r2, r2, r3
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
 8001e66:	e004      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	623b      	str	r3, [r7, #32]
      break;
 8001e76:	e002      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e7a:	623b      	str	r3, [r7, #32]
      break;
 8001e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc90      	pop	{r4, r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	08003f80 	.word	0x08003f80
 8001e90:	08003f90 	.word	0x08003f90
 8001e94:	40021000 	.word	0x40021000
 8001e98:	007a1200 	.word	0x007a1200
 8001e9c:	003d0900 	.word	0x003d0900

08001ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000000 	.word	0x20000000

08001eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb8:	f7ff fff2 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ebc:	4601      	mov	r1, r0
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4a03      	ldr	r2, [pc, #12]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08003fac 	.word	0x08003fac

08001edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee0:	f7ff ffde 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4601      	mov	r1, r0
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	0adb      	lsrs	r3, r3, #11
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4a03      	ldr	r2, [pc, #12]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08003fac 	.word	0x08003fac

08001f04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <RCC_Delay+0x34>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <RCC_Delay+0x38>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0a5b      	lsrs	r3, r3, #9
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f20:	bf00      	nop
  }
  while (Delay --);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	60fa      	str	r2, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f9      	bne.n	8001f20 <RCC_Delay+0x1c>
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	10624dd3 	.word	0x10624dd3

08001f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d07d      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f60:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10d      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6c:	4b4c      	ldr	r3, [pc, #304]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	4a4b      	ldr	r2, [pc, #300]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f76:	61d3      	str	r3, [r2, #28]
 8001f78:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f84:	2301      	movs	r3, #1
 8001f86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d118      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f94:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a42      	ldr	r2, [pc, #264]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa0:	f7fe fdc6 	bl	8000b30 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	e008      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa8:	f7fe fdc2 	bl	8000b30 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e06d      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fba:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fc6:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d02e      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d027      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fee:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff4:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ffa:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d014      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe fd91 	bl	8000b30 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7fe fd8d 	bl	8000b30 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e036      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ee      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4917      	ldr	r1, [pc, #92]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002042:	4313      	orrs	r3, r2
 8002044:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002046:	7dfb      	ldrb	r3, [r7, #23]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002056:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	490b      	ldr	r1, [pc, #44]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	4904      	ldr	r1, [pc, #16]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40007000 	.word	0x40007000
 80020a8:	42420440 	.word	0x42420440

080020ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e041      	b.n	8002142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe fa9a 	bl	800060c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3304      	adds	r3, #4
 80020e8:	4619      	mov	r1, r3
 80020ea:	4610      	mov	r0, r2
 80020ec:	f000 f930 	bl	8002350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d001      	beq.n	8002164 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e032      	b.n	80021ca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <HAL_TIM_Base_Start+0x88>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00e      	beq.n	8002194 <HAL_TIM_Base_Start+0x48>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217e:	d009      	beq.n	8002194 <HAL_TIM_Base_Start+0x48>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <HAL_TIM_Base_Start+0x8c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_TIM_Base_Start+0x48>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a13      	ldr	r2, [pc, #76]	; (80021dc <HAL_TIM_Base_Start+0x90>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d111      	bne.n	80021b8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d010      	beq.n	80021c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b6:	e007      	b.n	80021c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	40012c00 	.word	0x40012c00
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000800 	.word	0x40000800

080021e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_TIM_ConfigClockSource+0x18>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e0a6      	b.n	8002346 <HAL_TIM_ConfigClockSource+0x166>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002216:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800221e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b40      	cmp	r3, #64	; 0x40
 800222e:	d067      	beq.n	8002300 <HAL_TIM_ConfigClockSource+0x120>
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d80b      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x6c>
 8002234:	2b10      	cmp	r3, #16
 8002236:	d073      	beq.n	8002320 <HAL_TIM_ConfigClockSource+0x140>
 8002238:	2b10      	cmp	r3, #16
 800223a:	d802      	bhi.n	8002242 <HAL_TIM_ConfigClockSource+0x62>
 800223c:	2b00      	cmp	r3, #0
 800223e:	d06f      	beq.n	8002320 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002240:	e078      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002242:	2b20      	cmp	r3, #32
 8002244:	d06c      	beq.n	8002320 <HAL_TIM_ConfigClockSource+0x140>
 8002246:	2b30      	cmp	r3, #48	; 0x30
 8002248:	d06a      	beq.n	8002320 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800224a:	e073      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800224c:	2b70      	cmp	r3, #112	; 0x70
 800224e:	d00d      	beq.n	800226c <HAL_TIM_ConfigClockSource+0x8c>
 8002250:	2b70      	cmp	r3, #112	; 0x70
 8002252:	d804      	bhi.n	800225e <HAL_TIM_ConfigClockSource+0x7e>
 8002254:	2b50      	cmp	r3, #80	; 0x50
 8002256:	d033      	beq.n	80022c0 <HAL_TIM_ConfigClockSource+0xe0>
 8002258:	2b60      	cmp	r3, #96	; 0x60
 800225a:	d041      	beq.n	80022e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800225c:	e06a      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800225e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002262:	d066      	beq.n	8002332 <HAL_TIM_ConfigClockSource+0x152>
 8002264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002268:	d017      	beq.n	800229a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800226a:	e063      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6899      	ldr	r1, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f000 f941 	bl	8002502 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800228e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]
      break;
 8002298:	e04c      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6899      	ldr	r1, [r3, #8]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f000 f92a 	bl	8002502 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022bc:	609a      	str	r2, [r3, #8]
      break;
 80022be:	e039      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	461a      	mov	r2, r3
 80022ce:	f000 f8a1 	bl	8002414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2150      	movs	r1, #80	; 0x50
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f8f8 	bl	80024ce <TIM_ITRx_SetConfig>
      break;
 80022de:	e029      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	461a      	mov	r2, r3
 80022ee:	f000 f8bf 	bl	8002470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2160      	movs	r1, #96	; 0x60
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f8e8 	bl	80024ce <TIM_ITRx_SetConfig>
      break;
 80022fe:	e019      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	461a      	mov	r2, r3
 800230e:	f000 f881 	bl	8002414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	4618      	mov	r0, r3
 800231a:	f000 f8d8 	bl	80024ce <TIM_ITRx_SetConfig>
      break;
 800231e:	e009      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f000 f8cf 	bl	80024ce <TIM_ITRx_SetConfig>
        break;
 8002330:	e000      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a29      	ldr	r2, [pc, #164]	; (8002408 <TIM_Base_SetConfig+0xb8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00b      	beq.n	8002380 <TIM_Base_SetConfig+0x30>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236e:	d007      	beq.n	8002380 <TIM_Base_SetConfig+0x30>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a26      	ldr	r2, [pc, #152]	; (800240c <TIM_Base_SetConfig+0xbc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d003      	beq.n	8002380 <TIM_Base_SetConfig+0x30>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a25      	ldr	r2, [pc, #148]	; (8002410 <TIM_Base_SetConfig+0xc0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d108      	bne.n	8002392 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <TIM_Base_SetConfig+0xb8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00b      	beq.n	80023b2 <TIM_Base_SetConfig+0x62>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a0:	d007      	beq.n	80023b2 <TIM_Base_SetConfig+0x62>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <TIM_Base_SetConfig+0xbc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d003      	beq.n	80023b2 <TIM_Base_SetConfig+0x62>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a18      	ldr	r2, [pc, #96]	; (8002410 <TIM_Base_SetConfig+0xc0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d108      	bne.n	80023c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a07      	ldr	r2, [pc, #28]	; (8002408 <TIM_Base_SetConfig+0xb8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d103      	bne.n	80023f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	615a      	str	r2, [r3, #20]
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	40012c00 	.word	0x40012c00
 800240c:	40000400 	.word	0x40000400
 8002410:	40000800 	.word	0x40000800

08002414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f023 0201 	bic.w	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800243e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f023 030a 	bic.w	r3, r3, #10
 8002450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	621a      	str	r2, [r3, #32]
}
 8002466:	bf00      	nop
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f023 0210 	bic.w	r2, r3, #16
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800249a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	031b      	lsls	r3, r3, #12
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	621a      	str	r2, [r3, #32]
}
 80024c4:	bf00      	nop
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f043 0307 	orr.w	r3, r3, #7
 80024f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002502:	b480      	push	{r7}
 8002504:	b087      	sub	sp, #28
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800251c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	021a      	lsls	r2, r3, #8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	431a      	orrs	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4313      	orrs	r3, r2
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	609a      	str	r2, [r3, #8]
}
 8002536:	bf00      	nop
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002554:	2302      	movs	r3, #2
 8002556:	e046      	b.n	80025e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a16      	ldr	r2, [pc, #88]	; (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00e      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a4:	d009      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10c      	bne.n	80025d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	40012c00 	.word	0x40012c00
 80025f4:	40000400 	.word	0x40000400
 80025f8:	40000800 	.word	0x40000800

080025fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e03f      	b.n	800268e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe f810 	bl	8000648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800263e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f905 	bl	8002850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b08a      	sub	sp, #40	; 0x28
 800269a:	af02      	add	r7, sp, #8
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d17c      	bne.n	80027b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_UART_Transmit+0x2c>
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e075      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_UART_Transmit+0x3e>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e06e      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2221      	movs	r2, #33	; 0x21
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ea:	f7fe fa21 	bl	8000b30 <HAL_GetTick>
 80026ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002704:	d108      	bne.n	8002718 <HAL_UART_Transmit+0x82>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e003      	b.n	8002720 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002728:	e02a      	b.n	8002780 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f840 	bl	80027ba <UART_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e036      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002758:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	3302      	adds	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	e007      	b.n	8002772 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3301      	adds	r3, #1
 8002770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1cf      	bne.n	800272a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2200      	movs	r2, #0
 8002792:	2140      	movs	r1, #64	; 0x40
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f810 	bl	80027ba <UART_WaitOnFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e006      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	4613      	mov	r3, r2
 80027c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ca:	e02c      	b.n	8002826 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d2:	d028      	beq.n	8002826 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x30>
 80027da:	f7fe f9a9 	bl	8000b30 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d21d      	bcs.n	8002826 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e00f      	b.n	8002846 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	429a      	cmp	r2, r3
 8002834:	bf0c      	ite	eq
 8002836:	2301      	moveq	r3, #1
 8002838:	2300      	movne	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	429a      	cmp	r2, r3
 8002842:	d0c3      	beq.n	80027cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800288a:	f023 030c 	bic.w	r3, r3, #12
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	430b      	orrs	r3, r1
 8002896:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2c      	ldr	r2, [pc, #176]	; (8002964 <UART_SetConfig+0x114>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d103      	bne.n	80028c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028b8:	f7ff fb10 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	e002      	b.n	80028c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028c0:	f7ff faf8 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 80028c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	009a      	lsls	r2, r3, #2
 80028d0:	441a      	add	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	4a22      	ldr	r2, [pc, #136]	; (8002968 <UART_SetConfig+0x118>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	0119      	lsls	r1, r3, #4
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	009a      	lsls	r2, r3, #2
 80028f0:	441a      	add	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <UART_SetConfig+0x118>)
 80028fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2064      	movs	r0, #100	; 0x64
 8002906:	fb00 f303 	mul.w	r3, r0, r3
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	3332      	adds	r3, #50	; 0x32
 8002910:	4a15      	ldr	r2, [pc, #84]	; (8002968 <UART_SetConfig+0x118>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800291c:	4419      	add	r1, r3
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	009a      	lsls	r2, r3, #2
 8002928:	441a      	add	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fbb2 f2f3 	udiv	r2, r2, r3
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <UART_SetConfig+0x118>)
 8002936:	fba3 0302 	umull	r0, r3, r3, r2
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2064      	movs	r0, #100	; 0x64
 800293e:	fb00 f303 	mul.w	r3, r0, r3
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	3332      	adds	r3, #50	; 0x32
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <UART_SetConfig+0x118>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	f003 020f 	and.w	r2, r3, #15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	440a      	add	r2, r1
 800295a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40013800 	.word	0x40013800
 8002968:	51eb851f 	.word	0x51eb851f

0800296c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800297a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800297e:	2b84      	cmp	r3, #132	; 0x84
 8002980:	d005      	beq.n	800298e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002982:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4413      	add	r3, r2
 800298a:	3303      	adds	r3, #3
 800298c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800298e:	68fb      	ldr	r3, [r7, #12]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800299e:	f000 fae5 	bl	8002f6c <vTaskStartScheduler>
  
  return osOK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80029a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af04      	add	r7, sp, #16
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d020      	beq.n	80029fc <osThreadCreate+0x54>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01c      	beq.n	80029fc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685c      	ldr	r4, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681d      	ldr	r5, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691e      	ldr	r6, [r3, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ffc9 	bl	800296c <makeFreeRtosPriority>
 80029da:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029e4:	9202      	str	r2, [sp, #8]
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	9100      	str	r1, [sp, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	4632      	mov	r2, r6
 80029ee:	4629      	mov	r1, r5
 80029f0:	4620      	mov	r0, r4
 80029f2:	f000 f8e8 	bl	8002bc6 <xTaskCreateStatic>
 80029f6:	4603      	mov	r3, r0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e01c      	b.n	8002a36 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685c      	ldr	r4, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a08:	b29e      	uxth	r6, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ffab 	bl	800296c <makeFreeRtosPriority>
 8002a16:	4602      	mov	r2, r0
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	9200      	str	r2, [sp, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4632      	mov	r2, r6
 8002a24:	4629      	mov	r1, r5
 8002a26:	4620      	mov	r0, r4
 8002a28:	f000 f926 	bl	8002c78 <xTaskCreate>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d001      	beq.n	8002a36 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a40 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <osDelay+0x16>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	e000      	b.n	8002a58 <osDelay+0x18>
 8002a56:	2301      	movs	r3, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fa53 	bl	8002f04 <vTaskDelay>
  
  return osOK;
 8002a5e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f103 0208 	add.w	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f103 0208 	add.w	r2, r3, #8
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f103 0208 	add.w	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	601a      	str	r2, [r3, #0]
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d103      	bne.n	8002b24 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e00c      	b.n	8002b3e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3308      	adds	r3, #8
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	e002      	b.n	8002b32 <vListInsert+0x2e>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d2f6      	bcs.n	8002b2c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6892      	ldr	r2, [r2, #8]
 8002b8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6852      	ldr	r2, [r2, #4]
 8002b94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d103      	bne.n	8002ba8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	1e5a      	subs	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b08e      	sub	sp, #56	; 0x38
 8002bca:	af04      	add	r7, sp, #16
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	e7fe      	b.n	8002bec <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <xTaskCreateStatic+0x42>
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	e7fe      	b.n	8002c06 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c08:	23b4      	movs	r3, #180	; 0xb4
 8002c0a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	2bb4      	cmp	r3, #180	; 0xb4
 8002c10:	d009      	beq.n	8002c26 <xTaskCreateStatic+0x60>
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	e7fe      	b.n	8002c24 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01e      	beq.n	8002c6a <xTaskCreateStatic+0xa4>
 8002c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01b      	beq.n	8002c6a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c44:	2300      	movs	r3, #0
 8002c46:	9303      	str	r3, [sp, #12]
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	9302      	str	r3, [sp, #8]
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f851 	bl	8002d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c64:	f000 f8e4 	bl	8002e30 <prvAddNewTaskToReadyList>
 8002c68:	e001      	b.n	8002c6e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c6e:	697b      	ldr	r3, [r7, #20]
	}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3728      	adds	r7, #40	; 0x28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	; 0x30
 8002c7c:	af04      	add	r7, sp, #16
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fe9d 	bl	80039cc <pvPortMalloc>
 8002c92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00e      	beq.n	8002cb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002c9a:	20b4      	movs	r0, #180	; 0xb4
 8002c9c:	f000 fe96 	bl	80039cc <pvPortMalloc>
 8002ca0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
 8002cae:	e005      	b.n	8002cbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cb0:	6978      	ldr	r0, [r7, #20]
 8002cb2:	f000 ff4d 	bl	8003b50 <vPortFree>
 8002cb6:	e001      	b.n	8002cbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d017      	beq.n	8002cf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	9303      	str	r3, [sp, #12]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	9302      	str	r3, [sp, #8]
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f80f 	bl	8002d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ce6:	69f8      	ldr	r0, [r7, #28]
 8002ce8:	f000 f8a2 	bl	8002e30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cec:	2301      	movs	r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	e002      	b.n	8002cf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
	}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f023 0307 	bic.w	r3, r3, #7
 8002d2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <prvInitialiseNewTask+0x46>
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e7fe      	b.n	8002d48 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e012      	b.n	8002d76 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	7819      	ldrb	r1, [r3, #0]
 8002d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3334      	adds	r3, #52	; 0x34
 8002d60:	460a      	mov	r2, r1
 8002d62:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d006      	beq.n	8002d7e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	3301      	adds	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	2b0f      	cmp	r3, #15
 8002d7a:	d9e9      	bls.n	8002d50 <prvInitialiseNewTask+0x4c>
 8002d7c:	e000      	b.n	8002d80 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002d7e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d901      	bls.n	8002d92 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d8e:	2306      	movs	r3, #6
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	2200      	movs	r2, #0
 8002da2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	3304      	adds	r3, #4
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fe7c 	bl	8002aa6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	3318      	adds	r3, #24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fe77 	bl	8002aa6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	f1c3 0207 	rsb	r2, r3, #7
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	334c      	adds	r3, #76	; 0x4c
 8002de2:	2260      	movs	r2, #96	; 0x60
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 ffe8 	bl	8003dbc <memset>
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <prvInitialiseNewTask+0x120>)
 8002df0:	651a      	str	r2, [r3, #80]	; 0x50
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <prvInitialiseNewTask+0x124>)
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <prvInitialiseNewTask+0x128>)
 8002dfc:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	68f9      	ldr	r1, [r7, #12]
 8002e02:	69b8      	ldr	r0, [r7, #24]
 8002e04:	f000 fc40 	bl	8003688 <pxPortInitialiseStack>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e1a:	bf00      	nop
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	08003fd4 	.word	0x08003fd4
 8002e28:	08003ff4 	.word	0x08003ff4
 8002e2c:	08003fb4 	.word	0x08003fb4

08002e30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e38:	f000 fd0e 	bl	8003858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <prvAddNewTaskToReadyList+0xb8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	4a29      	ldr	r2, [pc, #164]	; (8002ee8 <prvAddNewTaskToReadyList+0xb8>)
 8002e44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e46:	4b29      	ldr	r3, [pc, #164]	; (8002eec <prvAddNewTaskToReadyList+0xbc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e4e:	4a27      	ldr	r2, [pc, #156]	; (8002eec <prvAddNewTaskToReadyList+0xbc>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e54:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <prvAddNewTaskToReadyList+0xb8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d110      	bne.n	8002e7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e5c:	f000 facc 	bl	80033f8 <prvInitialiseTaskLists>
 8002e60:	e00d      	b.n	8002e7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <prvAddNewTaskToReadyList+0xc0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <prvAddNewTaskToReadyList+0xbc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d802      	bhi.n	8002e7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e78:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <prvAddNewTaskToReadyList+0xbc>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <prvAddNewTaskToReadyList+0xc4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	4a1b      	ldr	r2, [pc, #108]	; (8002ef4 <prvAddNewTaskToReadyList+0xc4>)
 8002e86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <prvAddNewTaskToReadyList+0xc8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <prvAddNewTaskToReadyList+0xc8>)
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4a15      	ldr	r2, [pc, #84]	; (8002efc <prvAddNewTaskToReadyList+0xcc>)
 8002ea8:	441a      	add	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3304      	adds	r3, #4
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f7ff fe04 	bl	8002abe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002eb6:	f000 fcfd 	bl	80038b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <prvAddNewTaskToReadyList+0xc0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00e      	beq.n	8002ee0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <prvAddNewTaskToReadyList+0xbc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d207      	bcs.n	8002ee0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <prvAddNewTaskToReadyList+0xd0>)
 8002ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	2000044c 	.word	0x2000044c
 8002eec:	2000034c 	.word	0x2000034c
 8002ef0:	20000458 	.word	0x20000458
 8002ef4:	20000468 	.word	0x20000468
 8002ef8:	20000454 	.word	0x20000454
 8002efc:	20000350 	.word	0x20000350
 8002f00:	e000ed04 	.word	0xe000ed04

08002f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <vTaskDelay+0x60>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <vTaskDelay+0x2e>
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	e7fe      	b.n	8002f30 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002f32:	f000 f883 	bl	800303c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f36:	2100      	movs	r1, #0
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fb3f 	bl	80035bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f3e:	f000 f88b 	bl	8003058 <xTaskResumeAll>
 8002f42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d107      	bne.n	8002f5a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <vTaskDelay+0x64>)
 8002f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000474 	.word	0x20000474
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f7a:	463a      	mov	r2, r7
 8002f7c:	1d39      	adds	r1, r7, #4
 8002f7e:	f107 0308 	add.w	r3, r7, #8
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd f8e4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	9202      	str	r2, [sp, #8]
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	2300      	movs	r3, #0
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2300      	movs	r3, #0
 8002f98:	460a      	mov	r2, r1
 8002f9a:	4920      	ldr	r1, [pc, #128]	; (800301c <vTaskStartScheduler+0xb0>)
 8002f9c:	4820      	ldr	r0, [pc, #128]	; (8003020 <vTaskStartScheduler+0xb4>)
 8002f9e:	f7ff fe12 	bl	8002bc6 <xTaskCreateStatic>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <vTaskStartScheduler+0xb8>)
 8002fa6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fa8:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <vTaskStartScheduler+0xb8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e001      	b.n	8002fba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d11a      	bne.n	8002ff6 <vTaskStartScheduler+0x8a>
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <vTaskStartScheduler+0xbc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	334c      	adds	r3, #76	; 0x4c
 8002fd8:	4a14      	ldr	r2, [pc, #80]	; (800302c <vTaskStartScheduler+0xc0>)
 8002fda:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <vTaskStartScheduler+0xc4>)
 8002fde:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fe4:	4b13      	ldr	r3, [pc, #76]	; (8003034 <vTaskStartScheduler+0xc8>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002fea:	4b13      	ldr	r3, [pc, #76]	; (8003038 <vTaskStartScheduler+0xcc>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ff0:	f000 fbc2 	bl	8003778 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ff4:	e00d      	b.n	8003012 <vTaskStartScheduler+0xa6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d109      	bne.n	8003012 <vTaskStartScheduler+0xa6>
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	e7fe      	b.n	8003010 <vTaskStartScheduler+0xa4>
}
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	08003f94 	.word	0x08003f94
 8003020:	080033c9 	.word	0x080033c9
 8003024:	20000470 	.word	0x20000470
 8003028:	2000034c 	.word	0x2000034c
 800302c:	20000010 	.word	0x20000010
 8003030:	2000046c 	.word	0x2000046c
 8003034:	20000458 	.word	0x20000458
 8003038:	20000450 	.word	0x20000450

0800303c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <vTaskSuspendAll+0x18>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3301      	adds	r3, #1
 8003046:	4a03      	ldr	r2, [pc, #12]	; (8003054 <vTaskSuspendAll+0x18>)
 8003048:	6013      	str	r3, [r2, #0]
}
 800304a:	bf00      	nop
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000474 	.word	0x20000474

08003058 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <xTaskResumeAll+0x114>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <xTaskResumeAll+0x2a>
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	e7fe      	b.n	8003080 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003082:	f000 fbe9 	bl	8003858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003086:	4b39      	ldr	r3, [pc, #228]	; (800316c <xTaskResumeAll+0x114>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3b01      	subs	r3, #1
 800308c:	4a37      	ldr	r2, [pc, #220]	; (800316c <xTaskResumeAll+0x114>)
 800308e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <xTaskResumeAll+0x114>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d161      	bne.n	800315c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003098:	4b35      	ldr	r3, [pc, #212]	; (8003170 <xTaskResumeAll+0x118>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d05d      	beq.n	800315c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030a0:	e02e      	b.n	8003100 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80030a2:	4b34      	ldr	r3, [pc, #208]	; (8003174 <xTaskResumeAll+0x11c>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3318      	adds	r3, #24
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fd60 	bl	8002b74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	3304      	adds	r3, #4
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fd5b 	bl	8002b74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	2201      	movs	r2, #1
 80030c4:	409a      	lsls	r2, r3
 80030c6:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <xTaskResumeAll+0x120>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	4a2a      	ldr	r2, [pc, #168]	; (8003178 <xTaskResumeAll+0x120>)
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <xTaskResumeAll+0x124>)
 80030de:	441a      	add	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3304      	adds	r3, #4
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f7ff fce9 	bl	8002abe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	4b23      	ldr	r3, [pc, #140]	; (8003180 <xTaskResumeAll+0x128>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <xTaskResumeAll+0x12c>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003100:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <xTaskResumeAll+0x11c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1cc      	bne.n	80030a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800310e:	f000 fa13 	bl	8003538 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <xTaskResumeAll+0x130>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d010      	beq.n	8003140 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800311e:	f000 f837 	bl	8003190 <xTaskIncrementTick>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003128:	4b16      	ldr	r3, [pc, #88]	; (8003184 <xTaskResumeAll+0x12c>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3b01      	subs	r3, #1
 8003132:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f1      	bne.n	800311e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <xTaskResumeAll+0x130>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003140:	4b10      	ldr	r3, [pc, #64]	; (8003184 <xTaskResumeAll+0x12c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d009      	beq.n	800315c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <xTaskResumeAll+0x134>)
 800314e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800315c:	f000 fbaa 	bl	80038b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003160:	68bb      	ldr	r3, [r7, #8]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000474 	.word	0x20000474
 8003170:	2000044c 	.word	0x2000044c
 8003174:	2000040c 	.word	0x2000040c
 8003178:	20000454 	.word	0x20000454
 800317c:	20000350 	.word	0x20000350
 8003180:	2000034c 	.word	0x2000034c
 8003184:	20000460 	.word	0x20000460
 8003188:	2000045c 	.word	0x2000045c
 800318c:	e000ed04 	.word	0xe000ed04

08003190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800319a:	4b50      	ldr	r3, [pc, #320]	; (80032dc <xTaskIncrementTick+0x14c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 808c 	bne.w	80032bc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031a4:	4b4e      	ldr	r3, [pc, #312]	; (80032e0 <xTaskIncrementTick+0x150>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031ac:	4a4c      	ldr	r2, [pc, #304]	; (80032e0 <xTaskIncrementTick+0x150>)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d11f      	bne.n	80031f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80031b8:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <xTaskIncrementTick+0x154>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <xTaskIncrementTick+0x46>
 80031c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	e7fe      	b.n	80031d4 <xTaskIncrementTick+0x44>
 80031d6:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <xTaskIncrementTick+0x154>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <xTaskIncrementTick+0x158>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a40      	ldr	r2, [pc, #256]	; (80032e4 <xTaskIncrementTick+0x154>)
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4a40      	ldr	r2, [pc, #256]	; (80032e8 <xTaskIncrementTick+0x158>)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b40      	ldr	r3, [pc, #256]	; (80032ec <xTaskIncrementTick+0x15c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	4a3e      	ldr	r2, [pc, #248]	; (80032ec <xTaskIncrementTick+0x15c>)
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	f000 f9a0 	bl	8003538 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031f8:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <xTaskIncrementTick+0x160>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d34d      	bcc.n	800329e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003202:	4b38      	ldr	r3, [pc, #224]	; (80032e4 <xTaskIncrementTick+0x154>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <xTaskIncrementTick+0x80>
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <xTaskIncrementTick+0x82>
 8003210:	2300      	movs	r3, #0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003216:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <xTaskIncrementTick+0x160>)
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	601a      	str	r2, [r3, #0]
					break;
 800321e:	e03e      	b.n	800329e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003220:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <xTaskIncrementTick+0x154>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	d203      	bcs.n	8003240 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003238:	4a2d      	ldr	r2, [pc, #180]	; (80032f0 <xTaskIncrementTick+0x160>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6013      	str	r3, [r2, #0]
						break;
 800323e:	e02e      	b.n	800329e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	3304      	adds	r3, #4
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fc95 	bl	8002b74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	2b00      	cmp	r3, #0
 8003250:	d004      	beq.n	800325c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3318      	adds	r3, #24
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fc8c 	bl	8002b74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	2201      	movs	r2, #1
 8003262:	409a      	lsls	r2, r3
 8003264:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <xTaskIncrementTick+0x164>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4313      	orrs	r3, r2
 800326a:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <xTaskIncrementTick+0x164>)
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <xTaskIncrementTick+0x168>)
 800327c:	441a      	add	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	3304      	adds	r3, #4
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f7ff fc1a 	bl	8002abe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328e:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <xTaskIncrementTick+0x16c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	429a      	cmp	r2, r3
 8003296:	d3b4      	bcc.n	8003202 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003298:	2301      	movs	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800329c:	e7b1      	b.n	8003202 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800329e:	4b17      	ldr	r3, [pc, #92]	; (80032fc <xTaskIncrementTick+0x16c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	4914      	ldr	r1, [pc, #80]	; (80032f8 <xTaskIncrementTick+0x168>)
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d907      	bls.n	80032c6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80032b6:	2301      	movs	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e004      	b.n	80032c6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80032bc:	4b10      	ldr	r3, [pc, #64]	; (8003300 <xTaskIncrementTick+0x170>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <xTaskIncrementTick+0x170>)
 80032c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80032c6:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <xTaskIncrementTick+0x174>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80032ce:	2301      	movs	r3, #1
 80032d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80032d2:	697b      	ldr	r3, [r7, #20]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000474 	.word	0x20000474
 80032e0:	20000450 	.word	0x20000450
 80032e4:	20000404 	.word	0x20000404
 80032e8:	20000408 	.word	0x20000408
 80032ec:	20000464 	.word	0x20000464
 80032f0:	2000046c 	.word	0x2000046c
 80032f4:	20000454 	.word	0x20000454
 80032f8:	20000350 	.word	0x20000350
 80032fc:	2000034c 	.word	0x2000034c
 8003300:	2000045c 	.word	0x2000045c
 8003304:	20000460 	.word	0x20000460

08003308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800330e:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <vTaskSwitchContext+0xa8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003316:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <vTaskSwitchContext+0xac>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800331c:	e043      	b.n	80033a6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800331e:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <vTaskSwitchContext+0xac>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003324:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <vTaskSwitchContext+0xb0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003332:	7afb      	ldrb	r3, [r7, #11]
 8003334:	f1c3 031f 	rsb	r3, r3, #31
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	4920      	ldr	r1, [pc, #128]	; (80033bc <vTaskSwitchContext+0xb4>)
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <vTaskSwitchContext+0x5a>
	__asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	e7fe      	b.n	8003360 <vTaskSwitchContext+0x58>
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4a13      	ldr	r2, [pc, #76]	; (80033bc <vTaskSwitchContext+0xb4>)
 800336e:	4413      	add	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	3308      	adds	r3, #8
 8003384:	429a      	cmp	r2, r3
 8003386:	d104      	bne.n	8003392 <vTaskSwitchContext+0x8a>
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <vTaskSwitchContext+0xb8>)
 800339a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <vTaskSwitchContext+0xb8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	334c      	adds	r3, #76	; 0x4c
 80033a2:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <vTaskSwitchContext+0xbc>)
 80033a4:	6013      	str	r3, [r2, #0]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	20000474 	.word	0x20000474
 80033b4:	20000460 	.word	0x20000460
 80033b8:	20000454 	.word	0x20000454
 80033bc:	20000350 	.word	0x20000350
 80033c0:	2000034c 	.word	0x2000034c
 80033c4:	20000010 	.word	0x20000010

080033c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033d0:	f000 f852 	bl	8003478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <prvIdleTask+0x28>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d9f9      	bls.n	80033d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <prvIdleTask+0x2c>)
 80033de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033ec:	e7f0      	b.n	80033d0 <prvIdleTask+0x8>
 80033ee:	bf00      	nop
 80033f0:	20000350 	.word	0x20000350
 80033f4:	e000ed04 	.word	0xe000ed04

080033f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	e00c      	b.n	800341e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <prvInitialiseTaskLists+0x60>)
 8003410:	4413      	add	r3, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fb28 	bl	8002a68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3301      	adds	r3, #1
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b06      	cmp	r3, #6
 8003422:	d9ef      	bls.n	8003404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003424:	480d      	ldr	r0, [pc, #52]	; (800345c <prvInitialiseTaskLists+0x64>)
 8003426:	f7ff fb1f 	bl	8002a68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800342a:	480d      	ldr	r0, [pc, #52]	; (8003460 <prvInitialiseTaskLists+0x68>)
 800342c:	f7ff fb1c 	bl	8002a68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003430:	480c      	ldr	r0, [pc, #48]	; (8003464 <prvInitialiseTaskLists+0x6c>)
 8003432:	f7ff fb19 	bl	8002a68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003436:	480c      	ldr	r0, [pc, #48]	; (8003468 <prvInitialiseTaskLists+0x70>)
 8003438:	f7ff fb16 	bl	8002a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800343c:	480b      	ldr	r0, [pc, #44]	; (800346c <prvInitialiseTaskLists+0x74>)
 800343e:	f7ff fb13 	bl	8002a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <prvInitialiseTaskLists+0x78>)
 8003444:	4a05      	ldr	r2, [pc, #20]	; (800345c <prvInitialiseTaskLists+0x64>)
 8003446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <prvInitialiseTaskLists+0x7c>)
 800344a:	4a05      	ldr	r2, [pc, #20]	; (8003460 <prvInitialiseTaskLists+0x68>)
 800344c:	601a      	str	r2, [r3, #0]
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000350 	.word	0x20000350
 800345c:	200003dc 	.word	0x200003dc
 8003460:	200003f0 	.word	0x200003f0
 8003464:	2000040c 	.word	0x2000040c
 8003468:	20000420 	.word	0x20000420
 800346c:	20000438 	.word	0x20000438
 8003470:	20000404 	.word	0x20000404
 8003474:	20000408 	.word	0x20000408

08003478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800347e:	e019      	b.n	80034b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003480:	f000 f9ea 	bl	8003858 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <prvCheckTasksWaitingTermination+0x4c>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fb6f 	bl	8002b74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003496:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <prvCheckTasksWaitingTermination+0x50>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3b01      	subs	r3, #1
 800349c:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <prvCheckTasksWaitingTermination+0x50>)
 800349e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <prvCheckTasksWaitingTermination+0x54>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <prvCheckTasksWaitingTermination+0x54>)
 80034a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034aa:	f000 fa03 	bl	80038b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f80e 	bl	80034d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <prvCheckTasksWaitingTermination+0x54>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e1      	bne.n	8003480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000420 	.word	0x20000420
 80034c8:	2000044c 	.word	0x2000044c
 80034cc:	20000434 	.word	0x20000434

080034d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	334c      	adds	r3, #76	; 0x4c
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fc83 	bl	8003de8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d108      	bne.n	80034fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fb2d 	bl	8003b50 <vPortFree>
				vPortFree( pxTCB );
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fb2a 	bl	8003b50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034fc:	e017      	b.n	800352e <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d103      	bne.n	8003510 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fb21 	bl	8003b50 <vPortFree>
	}
 800350e:	e00e      	b.n	800352e <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003516:	2b02      	cmp	r3, #2
 8003518:	d009      	beq.n	800352e <prvDeleteTCB+0x5e>
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e7fe      	b.n	800352c <prvDeleteTCB+0x5c>
	}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800353e:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <prvResetNextTaskUnblockTime+0x40>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <prvResetNextTaskUnblockTime+0x14>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <prvResetNextTaskUnblockTime+0x16>
 800354c:	2300      	movs	r3, #0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <prvResetNextTaskUnblockTime+0x44>)
 8003554:	f04f 32ff 	mov.w	r2, #4294967295
 8003558:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800355a:	e008      	b.n	800356e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <prvResetNextTaskUnblockTime+0x40>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4a04      	ldr	r2, [pc, #16]	; (800357c <prvResetNextTaskUnblockTime+0x44>)
 800356c:	6013      	str	r3, [r2, #0]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20000404 	.word	0x20000404
 800357c:	2000046c 	.word	0x2000046c

08003580 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <xTaskGetSchedulerState+0x34>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800358e:	2301      	movs	r3, #1
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	e008      	b.n	80035a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <xTaskGetSchedulerState+0x38>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800359c:	2302      	movs	r3, #2
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	e001      	b.n	80035a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035a6:	687b      	ldr	r3, [r7, #4]
	}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000458 	.word	0x20000458
 80035b8:	20000474 	.word	0x20000474

080035bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035c6:	4b29      	ldr	r3, [pc, #164]	; (800366c <prvAddCurrentTaskToDelayedList+0xb0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035cc:	4b28      	ldr	r3, [pc, #160]	; (8003670 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff face 	bl	8002b74 <uxListRemove>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	2201      	movs	r2, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43da      	mvns	r2, r3
 80035ec:	4b21      	ldr	r3, [pc, #132]	; (8003674 <prvAddCurrentTaskToDelayedList+0xb8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4013      	ands	r3, r2
 80035f2:	4a20      	ldr	r2, [pc, #128]	; (8003674 <prvAddCurrentTaskToDelayedList+0xb8>)
 80035f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d10a      	bne.n	8003614 <prvAddCurrentTaskToDelayedList+0x58>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3304      	adds	r3, #4
 800360a:	4619      	mov	r1, r3
 800360c:	481a      	ldr	r0, [pc, #104]	; (8003678 <prvAddCurrentTaskToDelayedList+0xbc>)
 800360e:	f7ff fa56 	bl	8002abe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003612:	e026      	b.n	8003662 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800361c:	4b14      	ldr	r3, [pc, #80]	; (8003670 <prvAddCurrentTaskToDelayedList+0xb4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	429a      	cmp	r2, r3
 800362a:	d209      	bcs.n	8003640 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <prvAddCurrentTaskToDelayedList+0xc0>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3304      	adds	r3, #4
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f7ff fa63 	bl	8002b04 <vListInsert>
}
 800363e:	e010      	b.n	8003662 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003640:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3304      	adds	r3, #4
 800364a:	4619      	mov	r1, r3
 800364c:	4610      	mov	r0, r2
 800364e:	f7ff fa59 	bl	8002b04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	429a      	cmp	r2, r3
 800365a:	d202      	bcs.n	8003662 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800365c:	4a09      	ldr	r2, [pc, #36]	; (8003684 <prvAddCurrentTaskToDelayedList+0xc8>)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6013      	str	r3, [r2, #0]
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000450 	.word	0x20000450
 8003670:	2000034c 	.word	0x2000034c
 8003674:	20000454 	.word	0x20000454
 8003678:	20000438 	.word	0x20000438
 800367c:	20000408 	.word	0x20000408
 8003680:	20000404 	.word	0x20000404
 8003684:	2000046c 	.word	0x2000046c

08003688 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3b04      	subs	r3, #4
 8003698:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3b04      	subs	r3, #4
 80036a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f023 0201 	bic.w	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3b04      	subs	r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80036b8:	4a08      	ldr	r2, [pc, #32]	; (80036dc <pxPortInitialiseStack+0x54>)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	3b14      	subs	r3, #20
 80036c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3b20      	subs	r3, #32
 80036ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80036d0:	68fb      	ldr	r3, [r7, #12]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	080036e1 	.word	0x080036e1

080036e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <prvTaskExitError+0x4c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d009      	beq.n	8003708 <prvTaskExitError+0x28>
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e7fe      	b.n	8003706 <prvTaskExitError+0x26>
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800371a:	bf00      	nop
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0fc      	beq.n	800371c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	2000000c 	.word	0x2000000c

08003730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003730:	4b07      	ldr	r3, [pc, #28]	; (8003750 <pxCurrentTCBConst2>)
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	6808      	ldr	r0, [r1, #0]
 8003736:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800373a:	f380 8809 	msr	PSP, r0
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f04f 0000 	mov.w	r0, #0
 8003746:	f380 8811 	msr	BASEPRI, r0
 800374a:	f04e 0e0d 	orr.w	lr, lr, #13
 800374e:	4770      	bx	lr

08003750 <pxCurrentTCBConst2>:
 8003750:	2000034c 	.word	0x2000034c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop

08003758 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003758:	4806      	ldr	r0, [pc, #24]	; (8003774 <prvPortStartFirstTask+0x1c>)
 800375a:	6800      	ldr	r0, [r0, #0]
 800375c:	6800      	ldr	r0, [r0, #0]
 800375e:	f380 8808 	msr	MSP, r0
 8003762:	b662      	cpsie	i
 8003764:	b661      	cpsie	f
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	df00      	svc	0
 8003770:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003772:	bf00      	nop
 8003774:	e000ed08 	.word	0xe000ed08

08003778 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <xPortStartScheduler+0xcc>)
 8003780:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	22ff      	movs	r2, #255	; 0xff
 800378e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	4b29      	ldr	r3, [pc, #164]	; (8003848 <xPortStartScheduler+0xd0>)
 80037a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037a6:	4b29      	ldr	r3, [pc, #164]	; (800384c <xPortStartScheduler+0xd4>)
 80037a8:	2207      	movs	r2, #7
 80037aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037ac:	e009      	b.n	80037c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80037ae:	4b27      	ldr	r3, [pc, #156]	; (800384c <xPortStartScheduler+0xd4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	4a25      	ldr	r2, [pc, #148]	; (800384c <xPortStartScheduler+0xd4>)
 80037b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d0ef      	beq.n	80037ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037ce:	4b1f      	ldr	r3, [pc, #124]	; (800384c <xPortStartScheduler+0xd4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f1c3 0307 	rsb	r3, r3, #7
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d009      	beq.n	80037ee <xPortStartScheduler+0x76>
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	e7fe      	b.n	80037ec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037ee:	4b17      	ldr	r3, [pc, #92]	; (800384c <xPortStartScheduler+0xd4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <xPortStartScheduler+0xd4>)
 80037f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037f8:	4b14      	ldr	r3, [pc, #80]	; (800384c <xPortStartScheduler+0xd4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003800:	4a12      	ldr	r2, [pc, #72]	; (800384c <xPortStartScheduler+0xd4>)
 8003802:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800380c:	4b10      	ldr	r3, [pc, #64]	; (8003850 <xPortStartScheduler+0xd8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0f      	ldr	r2, [pc, #60]	; (8003850 <xPortStartScheduler+0xd8>)
 8003812:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003816:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003818:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <xPortStartScheduler+0xd8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <xPortStartScheduler+0xd8>)
 800381e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003822:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003824:	f000 f8b0 	bl	8003988 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <xPortStartScheduler+0xdc>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800382e:	f7ff ff93 	bl	8003758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003832:	f7ff fd69 	bl	8003308 <vTaskSwitchContext>
	prvTaskExitError();
 8003836:	f7ff ff53 	bl	80036e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	e000e400 	.word	0xe000e400
 8003848:	20000478 	.word	0x20000478
 800384c:	2000047c 	.word	0x2000047c
 8003850:	e000ed20 	.word	0xe000ed20
 8003854:	2000000c 	.word	0x2000000c

08003858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <vPortEnterCritical+0x54>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	4a0d      	ldr	r2, [pc, #52]	; (80038ac <vPortEnterCritical+0x54>)
 8003878:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <vPortEnterCritical+0x54>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10e      	bne.n	80038a0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <vPortEnterCritical+0x58>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <vPortEnterCritical+0x48>
 800388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	e7fe      	b.n	800389e <vPortEnterCritical+0x46>
	}
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	2000000c 	.word	0x2000000c
 80038b0:	e000ed04 	.word	0xe000ed04

080038b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <vPortExitCritical+0x48>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <vPortExitCritical+0x22>
 80038c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	e7fe      	b.n	80038d4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <vPortExitCritical+0x48>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3b01      	subs	r3, #1
 80038dc:	4a07      	ldr	r2, [pc, #28]	; (80038fc <vPortExitCritical+0x48>)
 80038de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <vPortExitCritical+0x48>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d104      	bne.n	80038f2 <vPortExitCritical+0x3e>
 80038e8:	2300      	movs	r3, #0
 80038ea:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	2000000c 	.word	0x2000000c

08003900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003900:	f3ef 8009 	mrs	r0, PSP
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <pxCurrentTCBConst>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003910:	6010      	str	r0, [r2, #0]
 8003912:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003916:	f04f 0050 	mov.w	r0, #80	; 0x50
 800391a:	f380 8811 	msr	BASEPRI, r0
 800391e:	f7ff fcf3 	bl	8003308 <vTaskSwitchContext>
 8003922:	f04f 0000 	mov.w	r0, #0
 8003926:	f380 8811 	msr	BASEPRI, r0
 800392a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	6808      	ldr	r0, [r1, #0]
 8003932:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003936:	f380 8809 	msr	PSP, r0
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	4770      	bx	lr

08003940 <pxCurrentTCBConst>:
 8003940:	2000034c 	.word	0x2000034c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop

08003948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003960:	f7ff fc16 	bl	8003190 <xTaskIncrementTick>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <xPortSysTickHandler+0x3c>)
 800396c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	2300      	movs	r3, #0
 8003974:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <vPortSetupTimerInterrupt+0x30>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <vPortSetupTimerInterrupt+0x34>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <vPortSetupTimerInterrupt+0x38>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <vPortSetupTimerInterrupt+0x3c>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	4a08      	ldr	r2, [pc, #32]	; (80039c8 <vPortSetupTimerInterrupt+0x40>)
 80039a6:	3b01      	subs	r3, #1
 80039a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039aa:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <vPortSetupTimerInterrupt+0x30>)
 80039ac:	2207      	movs	r2, #7
 80039ae:	601a      	str	r2, [r3, #0]
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	e000e010 	.word	0xe000e010
 80039bc:	e000e018 	.word	0xe000e018
 80039c0:	20000000 	.word	0x20000000
 80039c4:	10624dd3 	.word	0x10624dd3
 80039c8:	e000e014 	.word	0xe000e014

080039cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	; 0x28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80039d8:	f7ff fb30 	bl	800303c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80039dc:	4b57      	ldr	r3, [pc, #348]	; (8003b3c <pvPortMalloc+0x170>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80039e4:	f000 f90c 	bl	8003c00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80039e8:	4b55      	ldr	r3, [pc, #340]	; (8003b40 <pvPortMalloc+0x174>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f040 808c 	bne.w	8003b0e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01c      	beq.n	8003a36 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80039fc:	2208      	movs	r2, #8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d013      	beq.n	8003a36 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f023 0307 	bic.w	r3, r3, #7
 8003a14:	3308      	adds	r3, #8
 8003a16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <pvPortMalloc+0x6a>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e7fe      	b.n	8003a34 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d068      	beq.n	8003b0e <pvPortMalloc+0x142>
 8003a3c:	4b41      	ldr	r3, [pc, #260]	; (8003b44 <pvPortMalloc+0x178>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d863      	bhi.n	8003b0e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003a46:	4b40      	ldr	r3, [pc, #256]	; (8003b48 <pvPortMalloc+0x17c>)
 8003a48:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	; (8003b48 <pvPortMalloc+0x17c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a50:	e004      	b.n	8003a5c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d903      	bls.n	8003a6e <pvPortMalloc+0xa2>
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f1      	bne.n	8003a52 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003a6e:	4b33      	ldr	r3, [pc, #204]	; (8003b3c <pvPortMalloc+0x170>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d04a      	beq.n	8003b0e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	4413      	add	r3, r2
 8003a80:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	1ad2      	subs	r2, r2, r3
 8003a92:	2308      	movs	r3, #8
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d91e      	bls.n	8003ad8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <pvPortMalloc+0xf4>
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	e7fe      	b.n	8003abe <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	1ad2      	subs	r2, r2, r3
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ad2:	69b8      	ldr	r0, [r7, #24]
 8003ad4:	f000 f8f6 	bl	8003cc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ad8:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <pvPortMalloc+0x178>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <pvPortMalloc+0x178>)
 8003ae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <pvPortMalloc+0x178>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <pvPortMalloc+0x180>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d203      	bcs.n	8003afa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003af2:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <pvPortMalloc+0x178>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <pvPortMalloc+0x180>)
 8003af8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <pvPortMalloc+0x174>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003b0e:	f7ff faa3 	bl	8003058 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d009      	beq.n	8003b30 <pvPortMalloc+0x164>
 8003b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	e7fe      	b.n	8003b2e <pvPortMalloc+0x162>
	return pvReturn;
 8003b30:	69fb      	ldr	r3, [r7, #28]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3728      	adds	r7, #40	; 0x28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20001088 	.word	0x20001088
 8003b40:	20001094 	.word	0x20001094
 8003b44:	2000108c 	.word	0x2000108c
 8003b48:	20001080 	.word	0x20001080
 8003b4c:	20001090 	.word	0x20001090

08003b50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d046      	beq.n	8003bf0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003b62:	2308      	movs	r3, #8
 8003b64:	425b      	negs	r3, r3
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4413      	add	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <vPortFree+0xa8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <vPortFree+0x42>
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e7fe      	b.n	8003b90 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <vPortFree+0x5e>
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	e7fe      	b.n	8003bac <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <vPortFree+0xa8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d019      	beq.n	8003bf0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d115      	bne.n	8003bf0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <vPortFree+0xa8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	401a      	ands	r2, r3
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003bd4:	f7ff fa32 	bl	800303c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <vPortFree+0xac>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4413      	add	r3, r2
 8003be2:	4a06      	ldr	r2, [pc, #24]	; (8003bfc <vPortFree+0xac>)
 8003be4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003be6:	6938      	ldr	r0, [r7, #16]
 8003be8:	f000 f86c 	bl	8003cc4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003bec:	f7ff fa34 	bl	8003058 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003bf0:	bf00      	nop
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20001094 	.word	0x20001094
 8003bfc:	2000108c 	.word	0x2000108c

08003c00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003c0c:	4b27      	ldr	r3, [pc, #156]	; (8003cac <prvHeapInit+0xac>)
 8003c0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00c      	beq.n	8003c34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3307      	adds	r3, #7
 8003c1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0307 	bic.w	r3, r3, #7
 8003c26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <prvHeapInit+0xac>)
 8003c30:	4413      	add	r3, r2
 8003c32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c38:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <prvHeapInit+0xb0>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c3e:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <prvHeapInit+0xb0>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	4413      	add	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0307 	bic.w	r3, r3, #7
 8003c5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a15      	ldr	r2, [pc, #84]	; (8003cb4 <prvHeapInit+0xb4>)
 8003c60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003c62:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <prvHeapInit+0xb4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2200      	movs	r2, #0
 8003c68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003c6a:	4b12      	ldr	r3, [pc, #72]	; (8003cb4 <prvHeapInit+0xb4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	1ad2      	subs	r2, r2, r3
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <prvHeapInit+0xb4>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <prvHeapInit+0xb8>)
 8003c8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <prvHeapInit+0xbc>)
 8003c96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c98:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <prvHeapInit+0xc0>)
 8003c9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c9e:	601a      	str	r2, [r3, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000480 	.word	0x20000480
 8003cb0:	20001080 	.word	0x20001080
 8003cb4:	20001088 	.word	0x20001088
 8003cb8:	20001090 	.word	0x20001090
 8003cbc:	2000108c 	.word	0x2000108c
 8003cc0:	20001094 	.word	0x20001094

08003cc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ccc:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <prvInsertBlockIntoFreeList+0xa8>)
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e002      	b.n	8003cd8 <prvInsertBlockIntoFreeList+0x14>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d8f7      	bhi.n	8003cd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	4413      	add	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d108      	bne.n	8003d06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	441a      	add	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	441a      	add	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d118      	bne.n	8003d4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <prvInsertBlockIntoFreeList+0xac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d00d      	beq.n	8003d42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	441a      	add	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e008      	b.n	8003d54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <prvInsertBlockIntoFreeList+0xac>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e003      	b.n	8003d54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d002      	beq.n	8003d62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr
 8003d6c:	20001080 	.word	0x20001080
 8003d70:	20001088 	.word	0x20001088

08003d74 <__libc_init_array>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	2500      	movs	r5, #0
 8003d78:	4e0c      	ldr	r6, [pc, #48]	; (8003dac <__libc_init_array+0x38>)
 8003d7a:	4c0d      	ldr	r4, [pc, #52]	; (8003db0 <__libc_init_array+0x3c>)
 8003d7c:	1ba4      	subs	r4, r4, r6
 8003d7e:	10a4      	asrs	r4, r4, #2
 8003d80:	42a5      	cmp	r5, r4
 8003d82:	d109      	bne.n	8003d98 <__libc_init_array+0x24>
 8003d84:	f000 f8da 	bl	8003f3c <_init>
 8003d88:	2500      	movs	r5, #0
 8003d8a:	4e0a      	ldr	r6, [pc, #40]	; (8003db4 <__libc_init_array+0x40>)
 8003d8c:	4c0a      	ldr	r4, [pc, #40]	; (8003db8 <__libc_init_array+0x44>)
 8003d8e:	1ba4      	subs	r4, r4, r6
 8003d90:	10a4      	asrs	r4, r4, #2
 8003d92:	42a5      	cmp	r5, r4
 8003d94:	d105      	bne.n	8003da2 <__libc_init_array+0x2e>
 8003d96:	bd70      	pop	{r4, r5, r6, pc}
 8003d98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d9c:	4798      	blx	r3
 8003d9e:	3501      	adds	r5, #1
 8003da0:	e7ee      	b.n	8003d80 <__libc_init_array+0xc>
 8003da2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003da6:	4798      	blx	r3
 8003da8:	3501      	adds	r5, #1
 8003daa:	e7f2      	b.n	8003d92 <__libc_init_array+0x1e>
 8003dac:	08004014 	.word	0x08004014
 8003db0:	08004014 	.word	0x08004014
 8003db4:	08004014 	.word	0x08004014
 8003db8:	08004018 	.word	0x08004018

08003dbc <memset>:
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4402      	add	r2, r0
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d100      	bne.n	8003dc6 <memset+0xa>
 8003dc4:	4770      	bx	lr
 8003dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dca:	e7f9      	b.n	8003dc0 <memset+0x4>

08003dcc <cleanup_glue>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	460c      	mov	r4, r1
 8003dd0:	6809      	ldr	r1, [r1, #0]
 8003dd2:	4605      	mov	r5, r0
 8003dd4:	b109      	cbz	r1, 8003dda <cleanup_glue+0xe>
 8003dd6:	f7ff fff9 	bl	8003dcc <cleanup_glue>
 8003dda:	4621      	mov	r1, r4
 8003ddc:	4628      	mov	r0, r5
 8003dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003de2:	f000 b85f 	b.w	8003ea4 <_free_r>
	...

08003de8 <_reclaim_reent>:
 8003de8:	4b2c      	ldr	r3, [pc, #176]	; (8003e9c <_reclaim_reent+0xb4>)
 8003dea:	b570      	push	{r4, r5, r6, lr}
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4604      	mov	r4, r0
 8003df0:	4283      	cmp	r3, r0
 8003df2:	d051      	beq.n	8003e98 <_reclaim_reent+0xb0>
 8003df4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003df6:	b143      	cbz	r3, 8003e0a <_reclaim_reent+0x22>
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d14a      	bne.n	8003e94 <_reclaim_reent+0xac>
 8003dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e00:	6819      	ldr	r1, [r3, #0]
 8003e02:	b111      	cbz	r1, 8003e0a <_reclaim_reent+0x22>
 8003e04:	4620      	mov	r0, r4
 8003e06:	f000 f84d 	bl	8003ea4 <_free_r>
 8003e0a:	6961      	ldr	r1, [r4, #20]
 8003e0c:	b111      	cbz	r1, 8003e14 <_reclaim_reent+0x2c>
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f000 f848 	bl	8003ea4 <_free_r>
 8003e14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e16:	b111      	cbz	r1, 8003e1e <_reclaim_reent+0x36>
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f000 f843 	bl	8003ea4 <_free_r>
 8003e1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003e20:	b111      	cbz	r1, 8003e28 <_reclaim_reent+0x40>
 8003e22:	4620      	mov	r0, r4
 8003e24:	f000 f83e 	bl	8003ea4 <_free_r>
 8003e28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003e2a:	b111      	cbz	r1, 8003e32 <_reclaim_reent+0x4a>
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f000 f839 	bl	8003ea4 <_free_r>
 8003e32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003e34:	b111      	cbz	r1, 8003e3c <_reclaim_reent+0x54>
 8003e36:	4620      	mov	r0, r4
 8003e38:	f000 f834 	bl	8003ea4 <_free_r>
 8003e3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003e3e:	b111      	cbz	r1, 8003e46 <_reclaim_reent+0x5e>
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 f82f 	bl	8003ea4 <_free_r>
 8003e46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003e48:	b111      	cbz	r1, 8003e50 <_reclaim_reent+0x68>
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f000 f82a 	bl	8003ea4 <_free_r>
 8003e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e52:	b111      	cbz	r1, 8003e5a <_reclaim_reent+0x72>
 8003e54:	4620      	mov	r0, r4
 8003e56:	f000 f825 	bl	8003ea4 <_free_r>
 8003e5a:	69a3      	ldr	r3, [r4, #24]
 8003e5c:	b1e3      	cbz	r3, 8003e98 <_reclaim_reent+0xb0>
 8003e5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e60:	4620      	mov	r0, r4
 8003e62:	4798      	blx	r3
 8003e64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003e66:	b1b9      	cbz	r1, 8003e98 <_reclaim_reent+0xb0>
 8003e68:	4620      	mov	r0, r4
 8003e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003e6e:	f7ff bfad 	b.w	8003dcc <cleanup_glue>
 8003e72:	5949      	ldr	r1, [r1, r5]
 8003e74:	b941      	cbnz	r1, 8003e88 <_reclaim_reent+0xa0>
 8003e76:	3504      	adds	r5, #4
 8003e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e7a:	2d80      	cmp	r5, #128	; 0x80
 8003e7c:	68d9      	ldr	r1, [r3, #12]
 8003e7e:	d1f8      	bne.n	8003e72 <_reclaim_reent+0x8a>
 8003e80:	4620      	mov	r0, r4
 8003e82:	f000 f80f 	bl	8003ea4 <_free_r>
 8003e86:	e7ba      	b.n	8003dfe <_reclaim_reent+0x16>
 8003e88:	680e      	ldr	r6, [r1, #0]
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f000 f80a 	bl	8003ea4 <_free_r>
 8003e90:	4631      	mov	r1, r6
 8003e92:	e7ef      	b.n	8003e74 <_reclaim_reent+0x8c>
 8003e94:	2500      	movs	r5, #0
 8003e96:	e7ef      	b.n	8003e78 <_reclaim_reent+0x90>
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000010 	.word	0x20000010

08003ea0 <__malloc_lock>:
 8003ea0:	4770      	bx	lr

08003ea2 <__malloc_unlock>:
 8003ea2:	4770      	bx	lr

08003ea4 <_free_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	4605      	mov	r5, r0
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	d043      	beq.n	8003f34 <_free_r+0x90>
 8003eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eb0:	1f0c      	subs	r4, r1, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bfb8      	it	lt
 8003eb6:	18e4      	addlt	r4, r4, r3
 8003eb8:	f7ff fff2 	bl	8003ea0 <__malloc_lock>
 8003ebc:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <_free_r+0x94>)
 8003ebe:	6813      	ldr	r3, [r2, #0]
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	b933      	cbnz	r3, 8003ed2 <_free_r+0x2e>
 8003ec4:	6063      	str	r3, [r4, #4]
 8003ec6:	6014      	str	r4, [r2, #0]
 8003ec8:	4628      	mov	r0, r5
 8003eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ece:	f7ff bfe8 	b.w	8003ea2 <__malloc_unlock>
 8003ed2:	42a3      	cmp	r3, r4
 8003ed4:	d90b      	bls.n	8003eee <_free_r+0x4a>
 8003ed6:	6821      	ldr	r1, [r4, #0]
 8003ed8:	1862      	adds	r2, r4, r1
 8003eda:	4293      	cmp	r3, r2
 8003edc:	bf01      	itttt	eq
 8003ede:	681a      	ldreq	r2, [r3, #0]
 8003ee0:	685b      	ldreq	r3, [r3, #4]
 8003ee2:	1852      	addeq	r2, r2, r1
 8003ee4:	6022      	streq	r2, [r4, #0]
 8003ee6:	6063      	str	r3, [r4, #4]
 8003ee8:	6004      	str	r4, [r0, #0]
 8003eea:	e7ed      	b.n	8003ec8 <_free_r+0x24>
 8003eec:	4613      	mov	r3, r2
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	b10a      	cbz	r2, 8003ef6 <_free_r+0x52>
 8003ef2:	42a2      	cmp	r2, r4
 8003ef4:	d9fa      	bls.n	8003eec <_free_r+0x48>
 8003ef6:	6819      	ldr	r1, [r3, #0]
 8003ef8:	1858      	adds	r0, r3, r1
 8003efa:	42a0      	cmp	r0, r4
 8003efc:	d10b      	bne.n	8003f16 <_free_r+0x72>
 8003efe:	6820      	ldr	r0, [r4, #0]
 8003f00:	4401      	add	r1, r0
 8003f02:	1858      	adds	r0, r3, r1
 8003f04:	4282      	cmp	r2, r0
 8003f06:	6019      	str	r1, [r3, #0]
 8003f08:	d1de      	bne.n	8003ec8 <_free_r+0x24>
 8003f0a:	6810      	ldr	r0, [r2, #0]
 8003f0c:	6852      	ldr	r2, [r2, #4]
 8003f0e:	4401      	add	r1, r0
 8003f10:	6019      	str	r1, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	e7d8      	b.n	8003ec8 <_free_r+0x24>
 8003f16:	d902      	bls.n	8003f1e <_free_r+0x7a>
 8003f18:	230c      	movs	r3, #12
 8003f1a:	602b      	str	r3, [r5, #0]
 8003f1c:	e7d4      	b.n	8003ec8 <_free_r+0x24>
 8003f1e:	6820      	ldr	r0, [r4, #0]
 8003f20:	1821      	adds	r1, r4, r0
 8003f22:	428a      	cmp	r2, r1
 8003f24:	bf01      	itttt	eq
 8003f26:	6811      	ldreq	r1, [r2, #0]
 8003f28:	6852      	ldreq	r2, [r2, #4]
 8003f2a:	1809      	addeq	r1, r1, r0
 8003f2c:	6021      	streq	r1, [r4, #0]
 8003f2e:	6062      	str	r2, [r4, #4]
 8003f30:	605c      	str	r4, [r3, #4]
 8003f32:	e7c9      	b.n	8003ec8 <_free_r+0x24>
 8003f34:	bd38      	pop	{r3, r4, r5, pc}
 8003f36:	bf00      	nop
 8003f38:	20001098 	.word	0x20001098

08003f3c <_init>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	bf00      	nop
 8003f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f42:	bc08      	pop	{r3}
 8003f44:	469e      	mov	lr, r3
 8003f46:	4770      	bx	lr

08003f48 <_fini>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	bf00      	nop
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr
